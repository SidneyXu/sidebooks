[{"id":0,"href":"/docs/poet/config/apollo/","title":"Apollo","section":"配置管理","content":"Apollo #  应用通过app.id绑定Apollo上的配置。通过Apollo服务器按指定namespace覆写对应的application.yml文件。\n原理 #  服务端 #   Config Server一般配置多个，客户端通过 Eureka 服务发现连接该配置集群。为了解决其它语言没有Eureka的问题，Apollo引入了 MetaService，添加了一层代理层来完成服务发现。\n当修改数据后Portal会调用AdminService，AdminService会往DB中插入一条消息记录，ConfigService会定时扫描该表，有新记录则通知客户端。服务端和客户端之间使用长轮询维持连接。之所以没有引入消息队列是为了保持架构简单，减少复杂性。\n客户端 #   推拉结合：客户端和服务端保持一个长连接，配置实时推送 ；为了避免遗漏，客户端也会定期拉取(fallback)。 配置缓存在内存：本地再缓存一份。 应用程序：通过Apollo客户端获取最新配置；订阅配置更新通知。  基本概念 #    应用 application：配置唯一的appid\n  环境 environment：dev/fat/uat/pro\n  集群 cluster：一个应用不同实例的分组，主要用于不同的数据中心\n  命名空间 namespace：一个应用下不同配置的分组，默认分组为application；一般按照功能分组，如数据库配置，消息队列配置，应用配置；也可以引用不属于任何服务的公共配置，如线程池数量等\n 命名空间分类：私有，公有（需全局唯一），关联（私有继承公有） 私有命名空间会覆盖公共命名空间。不同命名空间应用中先定义的先使用。    配置项item：支持kv，json，xml，定位方式如下：\n 私有配置env+app+cluster+namespace+item_key 公有配置env+cluster+namespace+item_key    权限\n  Portal页面 #  基本页面\n 通过文本方式编辑配置，方便进行大量修改\n 可以查看已连接到Apollo的实例\n "},{"id":1,"href":"/docs/poet/db/colsql/cassandra/","title":"Cassandra","section":"列式数据库","content":"Cassandra #  "},{"id":2,"href":"/docs/poet/server_framework/dubbo/","title":"Dubbo","section":"服务框架","content":"Dubbo #  "},{"id":3,"href":"/docs/poet/db/fullsql/es/","title":"ElastisSearch","section":"全文数据库","content":"ElastisSearch #  "},{"id":4,"href":"/docs/poet/discovery/eureka/","title":"Eureka","section":"服务发现","content":"Eureka #  原理 #  Eureka Client定期从Eureka Server获取配置保存到缓存中。应用调用其它服务时会从本地缓存中获取可用的服务器。\n基本概念 #   Eureka Client：集成在客户端中，用于进行服务注册和服务发现，Client既可以是Service Provider也可以是Service Consumer。Client会优先访问位于同一个Zone里的Service Consumer。 Eureka Server：Eureka 服务端，提供页面查看功能，搭建多个服务端集群时需要将自己也注册到Eureka Server上。 自我保护机制：开启配置后，如果Eureka Server无法和一定数量Eureka Client进行连接时，停止新服务注册和服务踢出功能，待连接恢复正常，主要为了防止网络抖动将正常服务踢出。 Ribbon：客户端负载均衡。  生产实践 #    "},{"id":5,"href":"/docs/poet/tolerance/hystrix/","title":"Hystrix","section":"服务容错","content":"Hystrix #  使用方式 #  所有对外发起调用的地方，client配置在类上进行降级，直接返回错误或统一的服务繁忙，请稍候再试\n断路器原理 #  通过断路器实现，基于滚筒式统计，每秒一个桶，默认10个桶（10s）一个统计周期，统计每个桶内调用成功和失败次数来决定是否打开断路器。一旦打开后每5s进入半开状态放过一个请求，请求成功后关闭断路器。\nFall back方式 #   fail fast：错误时返回异常。 fail silent：错误时返回空数据。 static fallback：错误时返回缺省值。 fallback via network：错误时调用备用服务。 primary+secondary with fallback：新功能上线在secondary，先走老功能primary。  隔离方式 #   线程池隔离：每个任务采用独立的线程，支持排队超时等特性。适合线程数量可控以及调用不了解性能的第三方服务。主要用于服务间调用，数据库访问。 信号量隔离：相同任务使用同一线程，不支持排队超时等特性。适合高扇出的场景和高性能的内部应用。主要用于网关和缓存。  Turbine #  Turbine用于汇总多个Hystrix客户端提供的stream信息。\n生产实践 #  对接Eureka\n 网关集成Hystrix\n DashBoard使用 #     "},{"id":6,"href":"/docs/poet/mq/kafka/","title":"Kafka","section":"消息中间件","content":"Kafka #  1、基本概念 #   基于拉模型，offset默认保存在Zookeeper上，也可以手动保存。 基于ZooKeeper实现了动态扩容功能。 生产者不会立即发送消息，而是将消息攒一批发送。Broker将其作为一个整体处理，由消费者将批量消息解开。  2、使用方法 #   在设定consumer group的时候，只需要指明consumer数量即可，无需指定partition，consumer会自动进行rebalance。 producer端发送消息时只需指定topic，无需指定partition，Kafka会把收到的message进行load balance，均匀的分布在这个topic下的不同的partition上。  3、集群 #  3.1、扩容 #  当添加新的partition的时，原partition里面的message不会重新进行分配，只有进入topic的新message才会通过load balance添加到新的partition。\n3.2、重平衡 #  重平衡发生情况\n Partition扩容 消费者数量发生变更 订阅的规则发生变更（基于正则订阅，新创建的主题也符合规则）会发生重平衡。  重平衡时Kafka不可用。可以通过提高session.timout.ms和max.poll.interval.ms的值和降低heartbeat.interval.ms的值减少重平衡次数。\n"},{"id":7,"href":"/docs/poet/devops/linux/","title":"Linux","section":"Devops","content":"Linux #  网络请求分析 #  tcpdump\n上下文切换监控 #   vnstat pidstat  以上两者都属于sysstat包，MAC不可用。\n  wireshark：事件记录形式\n  tcpdump\n  CPU相关 #  top\n按CPU利用率排序，按q退出交互\ntop -o cpu 内存相关 #  vmstat\nvmstat \u0026lt;interval\u0026gt; \u0026lt;count\u0026gt;   r：在运行队列中等待执行的进程数；一般每颗CPU的运行队列应控制在3以内； b：在等待I/O的进程数；此时CPU处于空闲状态，所以应越小越好； free：空闲的物理内存(kb) si：从磁盘交换到内存的swap页数量（kb/sec）；当内存满足时是不应该出现大量交换页的； so：从内存交换到磁盘的swap页数量（kb/sec） cs：每秒上下文切换次数 us：用户进程的CPU时间占比 sy：系统进程的CPU时间占比 id：CPU空闲时间占比 wa：等待I/O的CPU时间占比；过高证明瓶颈在I/O而不是CPU资源；  网络相关 #  netstat\n磁盘相关 #  iostat\niostat \u0026lt;interval\u0026gt; \u0026lt;count\u0026gt; -tx 报告每秒向终端读取和写入的字符数和CPU的详细信息\n  %user：CPU处在用户模式下的时间百分比。 %nice：CPU处在带NICE值的用户模式下的时间百分比。 %system：CPU处在系统模式下的时间百分比。 %iowait：CPU等待输入输出完成时间的百分比。过高表示I/O存在瓶颈； %steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。 %idle：CPU空闲时间百分比。如果%idle值高但系统响应慢时，有可能是CPU等待分配内存，此时应加大内存容量。如果持续低于10，那么系统的CPU处理能力相对较低，表明系统中最需要解决的资源是CPU。 Device：磁盘名称 tps：每秒I/O请求数 kb_read/s：每秒读取的block数。 kb_read：读取的block总数。  sar #  基本概念 #  需安装sysstat包。查看使用方法如下：\nman sar 查看CPU利用率 #  注意这里的CPU信息指向虚拟CPU，而不是物理机上的核数\nsar -u \u0026lt;interval\u0026gt; \u0026lt;count\u0026gt;   %user 用户级别CPU时间占比。 %system 系统核心级别CPU时间占比。 %iowait 等待I/O操作CPU时间占比；过高表示硬盘存在I/O瓶颈。 %idle 空闲CPU时间占比；高但系统响应慢可能是CPU等待内存分配，需要加大内存；过低则CPU是瓶颈。  查看CPU负载 #  sar -q \u0026lt;interval\u0026gt; \u0026lt;count\u0026gt;   runq-sz 运行队列的长度。 plist-sz 进程和线程数的数量。 ldavg-1 最近1分钟的CPU平均负载。  查看内存使用情况 #  sar -r \u0026lt;interval\u0026gt; \u0026lt;count\u0026gt;   kbmemfree：空闲的物理内存大小 kbmemused：使用中的物理内存大小 %memused：物理内存使用率  查看I/O使用情况 #  sar -b \u0026lt;interval\u0026gt; \u0026lt;count\u0026gt;   tps：磁盘每秒I/O数量 rtps：每秒读取I/O总数 wtps：每秒写入I/O总数 bread/s 每秒钟从磁盘读取的块总数 bwrtn/s 每秒钟此写入到磁盘的块总数  查看磁盘使用情况 #  sar -p -d \u0026lt;interval\u0026gt; \u0026lt;count\u0026gt;   tps：每秒I/O的传输总数 rd_sec/s 每秒读取的扇区的总数 wr_sec/s 每秒写入的扇区的 总数 %util I/O请求占用的CPU百分比，值越高，说明I/O越慢  "},{"id":8,"href":"/docs/poet/db/docsql/mongodb/","title":"MongoDB","section":"文档型数据库","content":"MongoDB #  "},{"id":9,"href":"/docs/poet/db/sql/mysql/","title":"MySQL","section":"关系型数据库","content":"MySQL #  1、基本使用 #  1.1、查看当前所有连接 #  show processlist; 客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。\n show variables like \u0026#39;wait_timeout’; 上面返回的单位为秒。如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒： Lost connection to MySQL server during query。这时候如果你要继续，就需要重连，然后再执行请求了。\n2、高可用方案 #  2.1、MySQL Replication + MHA #  美团MHA MHA只负责MySQL主库的高可用。主库发生故障时，MHA会选择一个数据最接近原主库的候选主节点（这里只有一个从节点，所以该从节点即为候选主节点）作为新的主节点，并补齐和之前Dead Master 差异的Binlog。数据补齐之后，即将写VIP漂移到新主库上。\nMHA脑裂问题 DB服务器的上联交换机出现了抖动，导致主库无法访问，被管理节点判定为故障，触发MHA切换，VIP被漂到了新主库上。随后交换机恢复，主库可被访问，但由于VIP并没有从主库上摘除，因此2台机器同时拥有VIP，会产生脑裂。我们对MHA Manager加入了向同机架上其他物理机的探测，通过对比更多的信息来判断是网络故障还是单机故障。\n2.2、MySQL Cluster #  2.3、基于Paxos的MGR版本的MySQL #  3、性能优化 #  3.1、索引设计 #  该在哪种字段上添加索引\nshow index from \u0026lt;table_name\u0026gt;；   Cardinality：基数，表示字段的区分度。基数为采样统计，当变更的行数超过阀值时会触发重新采样。区分度越高索引越可能被使用。  当MySQL误用索引时\n 如果explain分析，如果扫描行数rows和实际行数区别大，就执行analyze table \u0026lt;table_name\u0026gt; 对基数重新采样。 考虑修改语句。 新建一个更合适的索引，让优化器做选择。或者在某种场景下删除误用的索引。 强制使用force_index。  列的区别度越高索引收益越大。查看区分度的方法为 SELECT COUNT(DISTINCT col_name)/COUNT(*) FROM table_name。\n3.2、为大表添加索引或字段 #  1、优先考虑类似 gh-ost 或者pt-online-schema-change这样的第三方方案，更加稳妥。\n原理：\nGh-ost创建与原始表相似的幽灵表“源表名_gho”，增量地将数据从原始表分批次插入复制到幽灵表中（默认1000条一次，\u0026ndash;chunk-size=1000），同时另一个线程读取binlog将正在进行的更改传播到幽灵表中。最后锁定原表，待binlog完全追上，将原始表替换为ghost表。\n2、MySQL 5.6 版本以后，创建索引都支持 Online DDL 了。可以用于小表加索引。\nALTER TABLE t1 ADD COLUMN x INT, ALGORITHM=INPLACE;\nINPLACE 算法，从 MySQL 5.6 开始被引入并默认使用。\n3、传统方案，在从库上执行操作，然后主从切换。\n一主一备，主库 A、备库 B，步骤如下：\n 在备库 B 上执行 set sql_log_bin=off，也就是不写 binlog，然后执行 alter table 语句加上索引； 执行主备切换；这时候主库是 B，备库是 A。 在 A 上执行 set sql_log_bin=off，然后执行 alter table 语句加上索引。  在需要紧急处理时，这个方案的效率是最高的。\n4、Alter 加时间，防止MDL影响线上数据读取。alter table table_nam wait 10 add column。\n大表加字段：建新表转移数据后重命名表名；alter+时间；online ddl；\n5、建空表通过触发器刷新数据\nCREATE TABLE main_table_new LIKE main_table;  ALTER TABLE main_table_new ADD COLUMN location VARCHAR(256);  INSERT INTO main_table_new SELECT *, NULL FROM main_table;  RENAME TABLE main_table TO main_table_old, main_table_new TO main_table;  DROP TABLE main_table_old; 3.3、SQL优化 #  优化 SQL 语句的步骤\n  通过 EXPLAIN 分析 SQL 执行计划\n  id：每个执行计划都有一个 id，如果是一个联合查询，这里还将有多个 id。\n  select_type：表示 SELECT 查询类型，常见的有 SIMPLE（普通查询，即没有联合查询、子查询）、PRIMARY（主查询）、UNION（UNION 中后面的查询）、SUBQUERY（子查询）等。\n  table：当前执行计划查询的表，如果给表起别名了，则显示别名信息。\n  partitions：访问的分区表信息。\n  type：表示从表中查询到行所执行的方式，查询方式是 SQL 优化中一个很重要的指标，结果值从好到差依次是：system \u0026gt; const \u0026gt; eq_ref \u0026gt; ref \u0026gt; range \u0026gt; index \u0026gt; ALL。\n  system/const：表中只有一行数据匹配，此时根据索引查询一次就能找到对应的数据。\n  eq_ref：使用唯一索引扫描，常见于多表连接中使用主键和唯一索引作为关联条件。\n  ref：非唯一索引扫描，还可见于唯一索引最左原则匹配扫描。\n  range：索引范围扫描，比如，\u0026lt;，\u0026gt;，between 等操作。\n  index：索引全表扫描，此时遍历整个索引树。\n  ALL：表示全表扫描，需要遍历全表来找到对应的行。\n  possible_keys：可能使用到的索引。\n  key：实际使用到的索引。\n  key_len：当前使用的索引的长度。\n  ref：关联 id 等信息。\n  rows：查找到记录所扫描的行数。\n  filtered：查找到所需记录占总扫描记录数的比例。\n  Extra：额外的信息。\n    通过 Show Profile 分析 SQL 执行性能。通过 EXPLAIN 分析执行计划，仅仅是停留在分析 SQL 的外部的执行情况，如果我们想要深入到 MySQL 内核中，从执行线程的状态和时间来分析的话，这个时候我们就可以选择 Profile。\nset profiling=0; show profiles； # 查看具体的步骤时间 SHOW PROFILE [type [, type] ... ] [FOR QUERY n] [LIMIT row_count [OFFSET offset]] type参数：\n  | ALL：显示所有开销信息\n  | BLOCK IO：阻塞的输入输出次数\n  | CONTEXT SWITCHES：上下文切换相关开销信息\n  | CPU：显示CPU的相关开销信息\n  | IPC：接收和发送消息的相关开销信息\n  | MEMORY ：显示内存相关的开销，目前无用\n  | PAGE FAULTS ：显示页面错误相关开销信息\n  | SOURCE ：列出相应操作对应的函数名及其在源码中的调用位置(行数)\n  | SWAPS：显示swap交换次数的相关开销信息 show Profiles 只显示最近发给服务器的 SQL 语句，默认情况下是记录最近已执行的 15 条记录，我们可以重新设置 profiling_history_size 增大该存储记录，最大值为 100。另外该功能实际已被弃用，将来会被移除。官方推荐用performance_schema库的event_statment_**相关表替代，里面有87张表，部分功能默认开启。\n    3.4、慢查询分析 #  在开发阶段，衡量一个 SQL 查询语句查询性能的手段是，估计执行 SQL 时需要遍历的数据行数。遍历行数在百万以内，可以认为是安全的 SQL，百万到千万这个量级则需要仔细评估和优化，千万级别以上则是非常危险的。为了减少慢 SQL 的可能性，每个数据表的行数最好控制在千万以内。\n1、慢查询日志\n通过以下命令行查询是否开启了记录慢 SQL 的功能，以及最大的执行时间是多少：\nShow variables like \u0026#39;slow_query%\u0026#39;; Show variables like \u0026#39;long_query_time\u0026#39;; 开启慢查询日志\nset global slow_query_log=\u0026#39;ON\u0026#39;; //开启慢SQL日志 set global slow_query_log_file=\u0026#39;/var/lib/mysql/test-slow.log\u0026#39;;//记录日志地址 set global long_query_time=1;//最大执行时间 2.、information_schema\n查询长事务\n可以在 information_schema 库的 innodb_trx 这个表中查询长事务，比如下面这个语句，用于查找持续时间超过 60s 的事务。\nselect * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))\u0026gt;60 3、pt-query-digest\n3.5、处理慢SQL #  定时检测\n上线一个定时监控和杀掉慢 SQL 的脚本。这个脚本每分钟执行一次，检测有没有执行时间超过一分钟的慢 SQL，如果发现，直接杀掉这个会话。\n降级\n做一个简单的静态页面的首页作为降级方案，只要包含商品搜索栏、大的品类和其他顶级功能模块入口的链接就可以了。在 Nginx 上做一个策略，如果请求首页数据超时的时候，直接返回这个静态的首页作为替代。这样后续即使首页再出现任何的故障，也可以暂时降级，用静态首页替代。至少不会影响到用户使用其他功能。\n3.6、历史数据清理 #  1、表空间没有释放的原因\n和 InnoDB 的物理存储结构有关系。虽然逻辑上每个表是一颗 B+ 树，但是物理上，每条记录都是存放在磁盘文件中的，这些记录通过一些位置指针来组织成一颗 B+ 树。当 MySQL 删除一条记录的时候，只是把文件的这块区域标记为空闲，然后再修改 B+ 树中相关的一些指针，完成删除。其实那条被删除的记录还是躺在那个文件的那个位置，所以并不会释放磁盘空间。\n2、建立新表\n建立新表是最快的方式，但是需要停服。具体来说就是将数据复制到新表，然后改名。\n-- 新建一个临时订单表 create table orders_temp like orders; -- 把当前订单复制到临时订单表中 insert into orders_temp select * from orders where timestamp \u0026gt;= SUBDATE(CURDATE(),INTERVAL 3 month); -- 修改替换表名 rename table orders to orders_to_be_droppd, orders_temp to orders; -- 删除旧表 drop table orders_to_be_dropp 3、在线迁移。\n分批删除历史订单数据，避免给线上数据库造成太大压力，可以基于主键删除进一步提高删除效率。\n4、释放表空间\n如果磁盘空间很紧张，非要把这部分磁盘空间释放出来，可以执行一次 OPTIMIZE TABLE 释放存储空间。\n对于 InnoDB 来说，执行 OPTIMIZE TABLE 实际上就是把这个表重建一遍，执行过程中会一直锁表。另外，这么优化有个前提条件，MySQL 的配置必须是每个表独立一个表空间（innodb_file_per_table = ON），如果所有表都是放在一起的，执行 OPTIMIZE TABLE 也不会释放磁盘空间。\n重建表的过程中，索引也会重建，这样表数据和索引数据都会更紧凑，不仅占用磁盘空间更小，查询效率也会有提升。那对于频繁插入删除大量数据的这种表，如果能接受锁表，定期执行 OPTIMIZE TABLE 是非常有必要的。\n4、集群优化 #  4.1、主备延迟 #  在备库上执行show slave status可以看到备库落后主库多少秒（seconds_behind_master）。主备延迟的最直接表现是备库消费relay log的速度远低于主库生产bin log日志的速度。\n如果只是看一下，可以连接到主库上用 show slave status 命令查看 如果你需要实时监控主从延迟，可以用 pt-heartbeat 工具。\n备库延迟的原因\n 主备机器性能差异。 读写分离，没有关注读库的性能。可以多接几个读库或者让读库多接几个从库分摊压力。 大事务。主库执行10min事务写入binlog后，备库也要执行同样时间。所以不要一次性删除大量数据，特别是历史数据，要分多个事务分批批删。 大表DDL。应使用gh-ost方案。  4.2、主备切换 #  手动主备切换流程\n 备库 readonly=true，只读。 在备库查看 seconds_behind_master，低于5秒则执行下一步，否则重试。 设置主库 readonly=true，只读。 在备库查看 seconds_behind_master，等于0则执行下一步，否则重试。 把备库 readonly=false。 把业务切换到备库。  4.3、一主多从切换 #  例如主机A和备机A`互备，从机B、C、D作为主机A的从机，提供只读功能。\n使用GTID进行切换\nGTID 的全称是 Global Transaction Identifier，也就是全局事务 ID，是一个事务在提交的时候生成的，是这个事务的唯一标识。\n格式是：GTID=server_uuid:gno\nserver_uuid 是一个实例第一次启动时自动生成的，是一个全局唯一的值；gno 是一个整数，初始值是 1，每次提交事务的时候分配给这个事务，并加 1。\nGTID 模式的启动也很简单，我们只需要在启动一个 MySQL 实例的时候，加上参数 gtid_mode=on 和 enforce_gtid_consistency=on 就可以了。\nMySQL 5.6 版本引入的 GTID 模式。\n4.4、主库的健康检查 #  select 1 语句返回成功只能说明这个库的进程还在，并不能说明主库没问题。另外，当服务器日志满了后，还是能提供查询功能。所以查询表语句也不行。\n解决方法为自建系统表\nupdate mysql.health_check set t_modified=now(); 如果是双主，由于双主会互相将数据同步给对方，所以以上语句可能会发生冲突。可以在表上再添加server_id字段作为标识。\n5、使用方法 #  5.1、Java层读写分离 #   定义多个Datasource save等操作时通过ThreadLocal注入枚举 实现AbstractRoutingDataSource接口，在方法determineCurrentLookupKey根据枚举返回对应的Datasource  "},{"id":10,"href":"/docs/poet/loadbalance/nginx/","title":"Nginx","section":"负载均衡与反向代理","content":"Nginx #  "},{"id":11,"href":"/docs/poet/db/cache/redis/","title":"Redis","section":"缓存","content":"Redis #  1、性能监测 #  1.1、如何计算Redis所占内存空间 #   http://www.redis.cn/redis_memory/ 该网站可以用于计算Redis占用的内存空间。\n1.2、如何判断Redis性能是否出了问题 #  使用基线性能判断。所谓的基线性能就是一个系统在低压力、无干扰下的基本性能，这个性能只由当前软硬件配置决定。 redis-cli 命令提供了–intrinsic-latency 选项，可以用来监测和统计测试期间内的最大延迟，这个延迟可以作为 Redis 的基线性能。\n./redis-cli --intrinsic-latency 120  该命令会打印 120 秒内监测到的最大延迟。一般情况下，运行 120 秒就足够监测到最大延迟了。 然后把运行时延迟和基线性能进行对比，Redis 运行时延迟是基线性能的 2 倍及以上，就可以认定 Redis 变慢了。\n1.3、如何排查 Redis 的 bigkey？ #  redis 可以在执行 redis-cli 命令时带上–bigkeys 选项，进而对整个数据库中的键值对大小情况进行统计分析，比如说，统计每种数据类型的键值对个数以及平均大小。\n./redis-cli --bigkeys  -------- summary ------- Sampled 32 keys in the keyspace! Total key length in bytes is 184 (avg len 5.75)  //统计每种数据类型中元素个数最多的bigkey Biggest list found \u0026#39;product1\u0026#39; has 8 items Biggest hash found \u0026#39;dtemp\u0026#39; has 5 fields Biggest string found \u0026#39;page2\u0026#39; has 28 bytes Biggest stream found \u0026#39;mqstream\u0026#39; has 4 entries Biggest set found \u0026#39;userid\u0026#39; has 5 members Biggest zset found \u0026#39;device:temperature\u0026#39; has 6 members  //统计每种数据类型的总键值个数，占所有键值个数的比例，以及平均大小 4 lists with 15 items (12.50% of keys, avg size 3.75) 5 hashs with 14 fields (15.62% of keys, avg size 2.80) 10 strings with 68 bytes (31.25% of keys, avg size 6.80) 1 streams with 4 entries (03.12% of keys, avg size 4.00) 7 sets with 19 members (21.88% of keys, avg size 2.71) 5 zsets with 17 members (15.62% of keys, avg size 3.40) 该工具是通过扫描数据库来查找 bigkey 的，所以在执行的过程中，会对 Redis 实例的性能产生影响。建议在从节点上执行该命令。 对于集合类型来说，这个方法只统计集合元素个数的多少，而不是实际占用的内存量。但是，一个集合中的元素个数多，并不一定占用的内存就多。因为，有可能每个元素占用的内存很小，这样的话，即使元素个数有很多，总内存开销也不大。\n1.4、碎片整理 #  1、碎片原因 #  当数据删除后，Redis 释放的内存空间会由内存分配器管理，并不会立即返回给操作系统。这往往会伴随一个潜在的风险点：Redis 释放的内存空间可能并不是连续的，那么，这些不连续的内存空间很有可能处于一种闲置的状态。这就会导致一个问题：虽然有空闲空间，Redis 却无法用来保存数据，不仅会减少 Redis 能够实际保存的数据量，还会降低 Redis 运行机器的成本回报率。\n内存碎片的形成有内因和外因两个层面的原因。内因是操作系统的内存分配机制，外因是 Redis 的负载特征。\n 内因：内存分配器的分配策略决定了操作系统无法做到“按需分配”。这是因为，内存分配器一般是按固定大小来分配内存，而不是完全按照应用程序申请的内存空间大小给程序分配。这样的分配方式本身是为了减少分配次数。 外因：不同类型键值对大小不一样和删改操作引起扩容和释放。  2、检查内存碎片 #  Redis 自身提供了 INFO 命令来查看内存使用情况。\nINFO memory # Memory used_memory:1073741736 used_memory_human:1024.00M used_memory_rss:1997159792 used_memory_rss_human:1.86G … mem_fragmentation_ratio:1.86  mem_fragmentation_ratio ：内存碎片率。等于 used_memory_rss/used_memory ，used_memory_rss 是操作系统实际分配给 Redis 的物理内存空间，里面包含了碎片；而 used_memory 是 Redis 实际申请使用的空间mem_fragmentation_ratio 大于 1.5 。这表明内存碎片率已经超过了 50%。一般情况下，这个时候，我们就需要采取一些措施来降低内存碎片率了。  例：如果 mem_fragmentation_ratio 小于 1 了，Redis 的内存使用是什么情况呢？会对 Redis 的性能和内存空间利用率造成什么影响？ mem_fragmentation_ratio小于1，说明used_memory_rss小于了used_memory，这意味着操作系统分配给Redis进程的物理内存，要小于Redis实际存储数据的内存，也就是说Redis没有足够的物理内存可以使用了，这会导致Redis一部分内存数据会被换到Swap中，之后当Redis访问Swap中的数据时，延迟会变大，性能下降。\n3、处理内存碎片 #  1、一个“简单粗暴”的方法就是重启 Redis 实例。 2、从 4.0-RC3 版本以后，Redis 自身提供了一种内存碎片自动清理的方法。 首先，Redis 需要启用自动内存碎片清理。\nconfig set activedefrag yes 如果同时满足下面两个条件，就开始清理。在清理的过程中，只要有一个条件不满足了，就停止自动清理。\n active-defrag-ignore-bytes 100mb：内存碎片的字节数达到 100MB 时，开始清理； active-defrag-threshold-lower 10：内存碎片空间占操作系统分配给 Redis 的总空间比例达到 10% 时，开始清理。  为了尽可能减少碎片清理对 Redis 的影响，自动内存碎片清理功能在执行时，还会监控清理操作占用的 CPU 时间，控制清理操作占用的 CPU 时间比例的上、下限，既保证清理工作能正常进行，又避免了降低 Redis 性能。这两个参数具体如下：\n active-defrag-cycle-min 25： 自动清理过程所用 CPU 时间的比例不低于 25%，保证清理能正常开展； active-defrag-cycle-max 75：自动清理过程所用 CPU 时间的比例不高于 75%，一旦超过，就停止清理，从而避免在清理时，大量的内存拷贝阻塞 Redis，导致响应延迟升高。  内存碎片自动清理涉及内存拷贝，发生在主线程，是一个性能风险点。如果你在实践过程中遇到 Redis 性能变慢，记得通过日志看下是否正在进行碎片清理。如果 Redis 的确正在清理碎片，那么，我建议你调小 active-defrag-cycle-max 的值，以减轻对正常请求处理的影响。\n2、慢查询 #  如何使用慢查询日志和 latency monitor 排查执行慢的操作？\n2.1、慢查询日志 #  开启慢查询日志。\n slowlog-log-slower-than：记录大于多少微秒的命令。 slowlog-max-len：最多记录多少条命令记录。底层实现是一个具有预定大小的先进先出队列，一旦记录的命令数量超过了队列长度，最先记录的命令操作就会被删除。这个值默认是 128。一般建议设置为 1000 左右。  查看慢查询日志，n为条数。\nSLOWLOG GET \u0026lt;n\u0026gt; 1) 1) (integer) 33 //每条日志的唯一ID编号  2) (integer) 1600990583 //命令执行时的时间戳  3) (integer) 20906 //命令执行的时长，单位是微秒。这里大约20毫米，算比较慢。  4) 1) \u0026#34;keys\u0026#34; //具体的执行命令和参数。这里表示命令keys abc*。  2) \u0026#34;abc*\u0026#34;  5) \u0026#34;127.0.0.1:54793\u0026#34; //客户端的IP和端口号  6) \u0026#34;\u0026#34; //客户端的名称，此处为空 2.2、latency monitor #  设置阀值，这里记录命令执行超过1000毫米。\nconfig set latency-monitor-threshold 1000 查看最新和最大的超过阈值的延迟情况\nlatency latest 1) 1) \u0026#34;command\u0026#34;  2) (integer) 1600991500 //命令执行的时间戳  3) (integer) 2500 //最近的超过阈值的延迟  4) (integer) 10100 //最大的超过阈值的延迟 2、集群架构 #  2.1、高可用架构 #  APP -\u0026gt; Redis Sentinel(3个) -\u0026gt; Redis Server Master/Slave，即哨兵3台，Server2台，一主一从\n2.2、脑裂问题 #  主要问题在于防止旧主库在主从切换过程中接收客户端请求。以下配置不符合时，主库就不会提供服务。\n min-slaves-to-write：主库能进行数据同步的最少从库数量； min-slaves-max-lag：这主从库间进行数据复制时，从库给主库发送 ACK 消息的最大延迟时间（以秒为单位）。  假设我们将 min-slaves-to-write 设置为 1，把 min-slaves-max-lag 设置为 12s，把哨兵的 down-after-milliseconds 设置为 10s，主库因为某些原因卡住了 15s，导致哨兵判断主库客观下线，开始进行主从切换。同时，因为原主库卡住了 15s，没有一个从库能和原主库在 12s 内进行数据复制，原主库也无法接收客户端请求了。这样一来，主从切换完成后，也只有新主库能接收请求，不会发生脑裂，也就不会发生数据丢失的问题了。 所以，我给你的建议是，假设从库有 K 个，可以将 min-slaves-to-write 设置为 K/2+1（如果 K 等于 1，就设为 1），将 min-slaves-max-lag 设置为十几秒（例如 10～20s），在这个配置下，如果有一半以上的从库和主库进行的 ACK 消息延迟超过十几秒，我们就禁止主库接收客户端写请求。\n2.3、分片集群 #   cluster-node-timeout ：设置了 Redis Cluster 中实例响应心跳消息的超时时间。  当我们在 Redis Cluster 集群中为每个实例配置了“一主一从”模式时，如果主实例发生故障，从实例会切换为主实例，受网络延迟和切换操作执行的影响，切换时间可能较长，就会导致实例的心跳超时（超出 cluster-node-timeout）。实例超时后，就会被 Redis Cluster 判断为异常。而 Redis Cluster 正常运行的条件就是，有半数以上的实例都能正常运行。所以，如果执行主从切换的实例超过半数，而主从切换时间又过长的话，就可能有半数以上的实例心跳超时，从而可能导致整个集群挂掉。所以，我建议你将 cluster-node-timeout 调大些（例如 10 到 20 秒）。\n2.4、复制积压缓冲区的溢出问题 #  增量复制时使用的缓冲区，这个缓冲区称为复制积压缓冲区。 主节点在把接收到的写命令同步给从节点时，同时会把这些写命令写入复制积压缓冲区。一旦从节点发生网络闪断，再次和主节点恢复连接后，从节点就会从复制积压缓冲区中，读取断连期间主节点接收到的写命令，进而进行增量同步。 首先，复制积压缓冲区是一个大小有限的环形缓冲区。当主节点把复制积压缓冲区写满后，会覆盖缓冲区中的旧命令数据。 如果从节点还没有同步这些旧命令数据，就会造成主从节点间重新开始执行全量复制。 其次，为了应对复制积压缓冲区的溢出问题，我们可以调整复制积压缓冲区的大小，也就是设置 repl_backlog_size 这个参数的值。\n2.5、复制缓冲区的溢出问题 #  在全量复制过程中，主节点在向从节点传输 RDB 文件的同时，会继续接收客户端发送的写命令请求。这些写命令就会先保存在复制缓冲区中，等 RDB 文件传输完成后，再发送给从节点去执行。主节点上会为每个从节点都维护一个复制缓冲区，来保证主从节点间的数据同步。 所以，如果在全量复制时，从节点接收和加载 RDB 较慢，同时主节点接收到了大量的写命令，写命令在复制缓冲区中就会越积越多，最终导致溢出。\n"},{"id":12,"href":"/docs/poet/gateway/spring-cloud-gateway/","title":"Spring Cloud Gateway","section":"网关","content":"Spring Cloud Gateway #  原理 #  基于Netty实现，通过过滤器实现网关功能。\n  过滤器分为全局过滤器和网关过滤器。所有过滤器构成一个chain。全局过滤器应用到所有路由中。每个过滤器都可以通过代码实现类似Zuul的Pre，Post，Route过滤器的功能。 FilterFactory用于按配置生产Filter，通过自定义FilterFactory可以在配置文件中按需配置自定义Filter。  "},{"id":13,"href":"/docs/poet/server/tomcat/","title":"Tomcat","section":"Web服务器","content":"Tomcat #  "},{"id":14,"href":"/docs/poet/server_framework/async/vertx/","title":"Vert.x","section":"异步编程","content":"Vert.x #  "},{"id":15,"href":"/docs/poet/job/xxljob/","title":"XXL-Job","section":"任务调度","content":"XXL-Job #  "},{"id":16,"href":"/docs/poet/db/sql/","title":"关系型数据库","section":"数据库","content":"数据库 #  知识点 #  MySQL\n  优化手段\n  优化SQL语句。\n 基于搜索条件添加合适的索引。 只在索引上排序。 加缓存。 分表分库。 避免空值判断。 控制表的字段数量，默认小于16全排序，大小16为rowId排序。 小事务。 select + 必要字段。 当只要一行数据时使用LIMIT 1。MySQL数据库引擎会在查找到一条数据后停止搜索，而不是继续往后查询下一条符合条件的数据记录。    增加buffer_pool的大小到物理内存的60%-80%。\n  增加buffer_pool实例的个数。\n  根据读写性能调整io_threads的个数。\n  增加change_buffer的大小。\n  增加redo log buffer的大小，会增加丢数据的风险。\n  增加binlog在page cache上的保存次数，会增加丢数据的风险。\n  调整脏页的刷盘速度，使其符合磁盘IOPS。\n    最佳实践 #   索引创建  列的区别度越高索引收益越大。查看区分度的方法为 SELECT COUNT(DISTINCT col_name)/COUNT(*) FROM table_name。 在单个索引就能实现查询效果的同时，也可以再建一个联合索引来实现覆盖索引，以便提高查询性能。   SQL语句  先写insert语句，再写影响并发度的update语句；因为行锁虽然只在必要时才会加上，但是在事务结束时才会被释放。 count操作优先使用count(*)。count(*)有优化，不需要写入1后统计1的数量。    Oracle Client\nloginTimeout=3000 checkoutTimeout=30000 preferredTestQuery=select 1 from dual idleConnectionTestPeriod=10000 testConnectionOnCheckout=true minPoolSize=5 maxPoolSize=15 initialPoolSize=1 acquireIncrement=1 acquireRetryAttempt=30 acquireRetryDelay=1000 maxIdleTime=25000 MySQL Server\n# 连接数 ## 服务器响应的最大连接数值（Max_used_connections）占服务器上限连接数值（max_connections）的比例值在10%以上，理想85%。5.7版本中默认是151， 最大可以达到16384。 ## 如果只有一台服务器，且Tomcat设置的最大线程池缺省值200，假设每个线程会用到一个数据库连接，那么线程池大小应该小于等于200。 max_connections=5050  # redo log ## redo log每次都直接持久化到磁盘。 innodb_flush_log_at_trx_commit=1 ## redo log buffer大小，默认为8MB。调高可减少磁盘写入次数。 innodb_log_buffer_size ## redo log日志大小 innodb_log_file_size=1G  # binlog ## binlog格式设为row。 binlog=row ## 1表示binlog每次都直接持久化到磁盘。提高性能时可设为100-1000。 ## 该配置表示每次提交事务都write到文件系统的page cache，累计N个事务后才fsync到磁盘上。 ## page cache是Linux的机制，MySQL重启这部分数据还在，但Linux重启数据就没了。 sync_binlog=1  # buffer pool、change_buffer ## buffer_pool大小，默认为128M。调大时可以显著提升系统性能，但是太大会引起页Swap。 ## 通过SHOW GLOBAL STATUS LIKE \u0026#39;innodb%read%\u0026#39;;语句计算缓冲池的命中率 ## 命中率=(1-innodb_buffer_pool_reads/innodb_buffer_pool_read_request)*100 ## 如果池大小已经到达了物理内存的80%但命中率还很低，就需要调整物理内存大小。 innodb_buffer_pool_size=物理内存的60%-80%间。 ## 50表示change_buffer占buffer pool的一半。 ## 使用机械硬盘和存放历史数据的库使用change_buffer时收益很大，应该将其尽量增大。 innodb_change_buffer_max_size=50 ## buffer_pool由多少个实例组成，可以减少竞争。只有innodb_buffer_pool_size\u0026gt;1G才生效，默认值为8。 ## 大小不超过 innodb_read_io_threads + innodb_write_io_threads 之和 innodb_buffer_pool_instances ## buffer_pool实例的读写线程数，和与实例数相等性能最优 ## SHOW GLOBAL STATUS LIKE \u0026#39;Com_select\u0026#39;;//读取数量 ## SHOW GLOBAL STATUS WHERE Variable_name IN (\u0026#39;Com_insert\u0026#39;, \u0026#39;Com_update\u0026#39;, \u0026#39;Com_replace\u0026#39;, \u0026#39;Com_delete\u0026#39;);//写入数量 ## 读大于写，则读线程多一些，否则反之。 innodb_read_io_threads innodb_write_io_threads  # 脏页 ## 控制脏页的刷盘速度。应确保缓冲池中的脏页比例始终小于75%。 ## 脏页太多会导致刷盘时间过长，影响查询时间。当数据从磁盘上载入到buffer_pool时，buffer_pool需要新开一个数据页，如果是干净页则直接释放该页数据继续使用。脏页证明内存和磁盘上数据不一致，需要先刷盘。 innodb_io_capacity=磁盘的IOPS ## SSD时设置，表示刷脏页时只刷当前页即可，为1表示当旁边也是脏页时则一起刷盘。 innodb_flush_neighbors=0  # 集群配置 ## 并行复制时，在32核备库上设置为8到16，该值控制多少线程处理relaylog日志。提高该值可以缓解主备延迟，但需要留出CPU供备库的查询功能。 slave_parallel_workers=8或16 ## 半同步复制 ### 表示至少等待数据复制到几个从节点再返回。这个数量配置的越大，丢数据的风险越小，但是集群的性能和可用性就越差。最大可以配置成和从节点的数量一样，这样就变成了同步复制。一般配成默认值 1 也就够了。 rpl_semi_sync_master_wait_slave_count ### 主库提交事务的线程等待复制的时间超时了，这种情况下事务仍然会被正常提交。并且，MySQL 会自动降级为异步复制模式，直到有足够多（rpl_semi_sync_master_wait_no_slave）的从库追上主库，才能恢复成半同步复制。如果这个期间主库宕机，仍然存在丢数据的风险。 ## 控制主库执行事务的线程，是在提交事务之前（AFTER_SYNC）等待复制，还是在提交事务之后（AFTER_COMMIT）等待复制。默认是 AFTER_SYNC，也就是先等待复制，再提交事务，这样完全不会丢数据。AFTER_COMMIT 具有更好的性能，不会长时间锁表，但是存在丢数据的风险。 rpl_semi_sync_master_wait_point 磁盘TB级别，则将redo log设为4个文件，每个1GB。\n磁盘IOPS测试\nfio -filename=$filename -direct=1 -iodepth 1 -thread -rw=randrw -ioengine=psync -bs=16k -size=500M -numjobs=10 -runtime=10 -group_reporting -name=mytest Java Client\n对于数据库连接池，根据我的经验，一般在线上我建议最小连接数控制在 10 左右，最大连接数控制在 20～30 左右即可。 #  "},{"id":17,"href":"/docs/poet/test/benchmark/","title":"压力测试","section":"测试与性能分析","content":"性能检测工具 #  压力测试 #  Apache的ab工具 #  主要看95%和99%分位的响应，另外mac默认的ab有BUG。\nab -n \u0026lt;请求数\u0026gt; -c \u0026lt;并发数\u0026gt; \u0026lt;url\u0026gt; 举例\nab -n 10000 -c 1000 -p \u0026#39;params.txt\u0026#39; -T \u0026#39;application/json\u0026#39; \u0026#39;http://localhost:8080/api/clients/register\u0026#39; 输出结果\nThis is ApacheBench, Version 2.3 \u0026lt;$Revision: 1879490 $\u0026gt; Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/  Benchmarking 127.0.0.1 (be patient) Completed 1000 requests Completed 2000 requests Completed 3000 requests Completed 4000 requests Completed 5000 requests Completed 6000 requests Completed 7000 requests Completed 8000 requests Completed 9000 requests Completed 10000 requests Finished 10000 requests   Server Software: Server Hostname: 127.0.0.1 Server Port: 10808  Document Path: /api/clients/register Document Length: 436 bytes  Concurrency Level: 4000 Time taken for tests: 7.382 seconds Complete requests: 10000 Failed requests: 578  (Connect: 0, Receive: 0, Length: 578, Exceptions: 0) Total transferred: 8119389 bytes Total body sent: 5060000 HTML transferred: 4359389 bytes Requests per second: 1354.63 [#/sec] (mean) Time per request: 2952.841 [ms] (mean) Time per request: 0.738 [ms] (mean, across all concurrent requests) Transfer rate: 1074.10 [Kbytes/sec] received  669.38 kb/s sent  1743.47 kb/s total  Connection Times (ms)  min mean[+/-sd] median max Connect: 0 37 48.3 1 167 Processing: 66 2416 805.2 2781 3296 Waiting: 6 2416 805.4 2781 3296 Total: 146 2453 760.8 2793 3296  Percentage of the requests served within a certain time (ms)  50% 2793  66% 2912  75% 2966  80% 3041  90% 3065  95% 3086  98% 3118  99% 3162  100% 3296 (longest request)  Requests per second：吞吐率，指某个并发用户数下单位时间内处理的请求数； Time per request：上面的是用户平均请求等待时间，指处理完成所有请求数所花费的时间 /（总请求数 / 并发用户数）； Time per request：下面的是服务器平均请求处理时间，指处理完成所有请求数所花费的时间 / 总请求数； Percentage of the requests served within a certain time：每秒请求时间分布情况，指在整个请求中，每个请求的时间长度的分布情况，例如有 50% 的请求响应在 8ms 内，66% 的请求响应在 10ms 内，说明有 16% 的请求在 8ms~10ms 之间。  Gatling #  堆内存监测 #  jmap #  查看堆信息。\njmap -heap \u0026lt;pid\u0026gt; 导出堆信息，导出后的文件可以放入MAT来查看。\njmap -dump:format=b,file=\u0026lt;hprof_filename\u0026gt; \u0026lt;pid\u0026gt; "},{"id":18,"href":"/docs/poet/test/jmh/","title":"基准测试","section":"测试与性能分析","content":"JMH #  测试代码执行效率如果碰到普通循环语句中。在其内部进行打印是没办法很好的测试出性能，因为会存在编译器优化，没办法实现性能测试需要达到的功能。 不过，JMH 也不能完美解决性能测试数据的偏差问题。它甚至会在每次运行的输出结果中打印上述语句，所以，JMH 的开发人员也给出了一个小忠告：我们开发人员不要轻信 JMH 的性能测试数据，不要基于这些数据乱下结论。\n压测，重新进行压测,使用chaosblade添加网络丢包,延迟,并且观察grafana上的指标,来确定问题。\n使用JMH\n生成 JMH 项目\n$ mvn archetype:generate \\  -DinteractiveMode=false \\  -DarchetypeGroupId=org.openjdk.jmh \\  -DarchetypeArtifactId=jmh-java-benchmark-archetype \\  -DgroupId=org.sample \\  -DartifactId=test \\  -Dversion=1.21 $ cd test src/main/org/sample/MyBenchmark.java 编译和运行 JMH 项目\n$ mvn compile $ ls target/generated-sources/annotations/org/sample/generated/ MyBenchmark_jmhType.java MyBenchmark_jmhType_B1.java MyBenchmark_jmhType_B2.java MyBenchmark_jmhType_B3.java MyBenchmark_testMethod_jmhTest.java 接下来可以运行mvn package命令，将编译好的 class 文件打包成 jar 包。生成的 jar 包同样位于target目录下，其名字为benchmarks.jar。jar 包里附带了一系列配置文件，如下所示：\n打包生成的 jar 包可以直接运行。具体指令如下所示：\n$ java -jar target/benchmarks.jar 这里指的是 JMH 会 Fork 出一个新的 Java 虚拟机，来运行性能基准测试。 在这种情况下，通过运行更多的 Fork，并将每个 Java 虚拟机的性能测试结果平均起来，可以增强最终数据的可信度，使其误差更小。在 JMH 中，你可以通过@Fork注解来配置，具体如下述代码所示：\n@Fork(10) public class MyBenchmark {  ... } 除了吞吐量之外，我们还可以输出其他格式的性能数据，例如运行一次操作的平均时间。具体的配置方法以及对应参数如下述代码以及下表所示：\n@BenchmarkMode(Mode.AverageTime) public class MyBenchmark {  ... } "},{"id":19,"href":"/docs/poet/server_framework/async/future/","title":"CompletableFuture","section":"异步编程","content":"CompletableFuture #  基本概念\n Runnable：无返回值的函数 Supplier：有返回值的函数 Consumer：接受入参的函数 Function：接受入参且有返回值的函数 CompletionStage: CompletableFuture父类  API接口列表\nCompletableFuture\u0026lt;Void\u0026gt; future1 = CompletableFuture.runAsync(runnable, executor);  CompletableFuture\u0026lt;Boolean\u0026gt; future2 = CompletableFuture.supplyAsync(() -\u0026gt; 1)  .thenApply(integer -\u0026gt; integer == 1); Boolean future2Res = future2.get(); 以下常用方法中凡是方法名以Async作为后缀的都是异步方法：\n runAsync(runnable, executor) ：在线程池中执行Runnable。 supplyAsync(supplier, executor） thenRun(runnable)：在当前线程中执行Runnable。 thenAccept(consumer) thenApply(function) exceptionally(function)：当发生异常时如何处理返回值。 thenCompose(function, stage)：组合两个Future。 CompletableFuture.allOf(stage..)：组合多个Future。 get()：阻塞当前线程获得结果。  一般来说通过supplyAsync()提供返回值，thenApply()或thenAccept()处理返回值，exceptionally()处理发生异常时的返回值。\n"},{"id":20,"href":"/docs/poet/server_framework/springboot/","title":"SpringBoot","section":"服务框架","content":"SpringBoot #  "},{"id":21,"href":"/docs/poet/devops/code/","title":"代码管理","section":"Devops","content":"代码管理 #  分支管理 #  特性分支模式 #   建立多个特性分支feature/001，在特性分支上进行开发 完成开发后，主干拉出发布分支release/001 将需要发布的特性分支合并到发布分支上 上线后，发布分支合并到主干，添加标签，删除发布分支和特性分支 如果某个功能临时不需要，可以从主干上拉出新的发布分支，进行合并  主干开发模式 #   在主干上拉出开发分支dev/001，在开发分支上进行开发 完成开发后，主干拉出发布分支release/001 将开发分支合并到发布分支上 上线后，将发布分支合并到主干，添加标签，删除发布分支和开发分支  代码检查 #  CheckStyle、FindBugs、Sonar\n代码质量 #   代码规约；规范必要注释，用于梳理思维；IDE Format，持续集成Checkstyle、FindBugs；复杂逻辑工具类单元测试； 给予思考时间不随便压缩工期；Review代码；  持续集成 #   持续集成 jenkins+snoarqube+nexus  "},{"id":22,"href":"/docs/poet/db/docsql/","title":"文档型数据库","section":"数据库","content":"文档型数据库 #  "},{"id":23,"href":"/docs/poet/test/cpu/","title":"CPU和线程的性能分析","section":"测试与性能分析","content":"CPU和线程的性能分析 #  "},{"id":24,"href":"/docs/poet/server_framework/async/rxjava/","title":"RxJava","section":"异步编程","content":"RxJava #  "},{"id":25,"href":"/docs/poet/db/colsql/","title":"列式数据库","section":"数据库","content":"列式数据库 #  "},{"id":26,"href":"/docs/poet/server_framework/async/","title":"异步编程","section":"服务框架","content":"异步编程 #  知识点 #  最佳实践 #  "},{"id":27,"href":"/docs/poet/devops/log/","title":"日志管理","section":"Devops","content":"日志管理 #  "},{"id":28,"href":"/docs/poet/db/fullsql/","title":"全文数据库","section":"数据库","content":"全文数据库 #  "},{"id":29,"href":"/docs/poet/test/memory/","title":"内存和硬盘的性能分析","section":"测试与性能分析","content":"内存和硬盘的性能分析 #  "},{"id":30,"href":"/docs/poet/test/jvm/","title":"JVM的性能分析","section":"测试与性能分析","content":"JVM的性能分析 #  "},{"id":31,"href":"/docs/poet/db/cache/","title":"缓存","section":"数据库","content":"缓存数据库 #  知识点 #  Redis性能问题\n 大key或者多个key删除 AOF同步写回 AOF重写引起AOF写回阻塞，井AOF日志配置到SSD。 加载大RDB，一般控制在2G到4G。 在节点上执行聚合操作。 操作系统swap，通常发生在内存不足时。当出现百MB以上swap则需要加内存或加节点。可以通过redis-cli info | grep process_id命令查询swap大小。 使用了内存大页，生产中建议关闭。如果采用了内存大页，那么，即使客户端请求只修改 100B 的数据，Redis 也需要拷贝 2MB 的大页。相反，如果是常规内存页机制，只用拷贝 4KB。 开启了碎片清理，内存碎片清理由主线程操作。调小active-defrag-cycle-max ，控制内存碎片整理所用CPU时间。 从库落后太多，大key写入引起复制风暴  最佳实践 #   通用  通过CAT等统计缓存命中率 优先写数据库删缓存。特定情况可以同时更新数据库和缓存，比如新用户注册，删缓存没有意义，而注册后的用户大概率需要用到注册信息。 适用场合：  读多写少，更新不频繁的热点数据。 计算代价大的数据。 不与具体用户绑定，千人一面的数据。如商品页、排行榜、公告栏等。 对数据一致性要求不严格。     Redis  持久化  Master最好不要做任何持久化工作，比如RDB内存快照和AOF日志文件 如果数据比较重要，则在某个Slave开启AOF备份数据，策略设置为每秒同步一次 如果数据非常重要，则同时开启RDB和AOF。 在这种情况下， 当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。 数据不能丢，AOF+RDB。 允许分钟丢失，RDB。 只用AOF时优先everysec。   集群  Master和Slave在同一个局域网内。 哨兵至少3个，且所有哨兵配置一样。 为了避免主从同步时，主库全量RDB的压力，主从复制不要使用图状结构，而是使用级联的单向链表结构方式分摊压力。例如：从1，从2同步自主库。从3，从4同步自从1。   List只当队列用。 大量数据用scan范围操作。 布隆过滤器是大key，建议放在单独的Redis实例中。 使用expire_at设置具体的过期时间点。而expire为存活时间，在从库为收到主库同步过来的命令的时间加上存活时间，所以可能发生过期读。 通过unlink异步删除大key。 关闭Huge page，避免AOF重写时因为大页拷贝引起的阻塞。    Redis Server\n# 缓冲 ## replication buffer大小。断开连接时会被清空。 client-output-buffer-limit=256mb  # 集群 ## 防止脑裂 ### 主库能进行数据同步的最少从库数量 min-slaves-to-write=从库数/2+1 ### 主从同步时，从库给主库发送 ACK 消息的最大延迟时间（以秒为单位） min-slaves-max-lag=10到20s ### 哨兵判断的客观下线时间。适当调大该值，当哨兵与主库之间网络存在短时波动时，可以降低误判的概率。但是调大也意味着主从切换的时间会变长，对业务的影响时间越久。 down-after-milliseconds=10s  ## Redis Cluster集群 ### 节点心跳超时时间。如果分片节点采用一主一从模式，如果主从切换过慢超过节点心跳超时时间。分片集群就会认为该节点右异常，如果一半异常集群就会停止服务，所以应该调大一点。 cluster-node-timeout=10到20s "},{"id":32,"href":"/docs/poet/db/appcache/","title":"应用内缓存","section":"数据库","content":"应用内缓存 #  "},{"id":33,"href":"/docs/poet/db/dbproxy/","title":"数据库中间件","section":"数据库","content":"数据库中间件 #  知识点 #  最佳实践 #  Sharding-Sphere #  由三个组件组成： Sharding-JDBC（推荐Java栈）、Sharding-Proxy、Sharding-Sidecar\nMyCat #  Canal #  mysql-canal-kafka-flink-tidb\n"},{"id":34,"href":"/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":"Introduction #  This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug $ Some Definitions #  There are a few concepts that you need to understand before creating a theme.\nSkins #  Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page #  The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File #  When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent #  Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter #  The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown #  Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files #  Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template #  A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template #  A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template #  A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site #  Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site #  Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site #  Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme #  Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton #  Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026#34;michael d henderson\u0026#34; description = \u0026#34;a minimal working template\u0026#34; license = \u0026#34;MIT\u0026#34; name = \u0026#34;zafta\u0026#34; source_repo = \u0026#34;\u0026#34; tags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme #  Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026#34;zafta\u0026#34; baseurl = \u0026#34;\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;zafta - totally refreshing\u0026#34; MetaDataFormat = \u0026#34;toml\u0026#34; :wq $ Generate the Site #  Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page #  Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static #  Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle #  When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory #  When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option #  Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload #  Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands #  Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template #  The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page #  Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload #  Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page #  \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts #  Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026#34;\u0026#34; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; title = \u0026#34;first\u0026#34; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; title = \u0026#34;second\u0026#34; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates #  In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage #  The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts #  We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File #  $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content #  The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing #  We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages #  Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026#34;about\u0026#34; description = \u0026#34;about this site\u0026#34; date = \u0026#34;2014-09-27\u0026#34; slug = \u0026#34;about time\u0026#34; +++ ## about us i\u0026#39;m speechless :wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026#34;/:title/\u0026#34; about = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates #  If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials #  In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials #  The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials #  $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts #  It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template #  We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself #  DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":35,"href":"/posts/migrate-from-jekyll/","title":"Migrating from Jekyll","section":"Blog","content":"Move static content to static #  Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png  should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file #  Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site #  The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\n  Change your submodule to point to map gh-pages to public instead of _site (recommended).\n git submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public    Or, change the Hugo configuration to use _site instead of public.\n { .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. }    Convert Jekyll templates to Hugo templates #  That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes #  Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation #  As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag)  is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt;  Usage #  I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}  to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}  As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches #  Fix content #  Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up #  You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff #   Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":36,"href":"/docs/poet/","title":"服务端技术","section":"Docs","content":"简介 #  常用技术资料合集。\n大纲 #   1、负载均衡：Nginx 2、Web服务器：Tomcat、Jetty 3、配置管理：Apollo、SpringBoot Yaml 4、服务发现：Eureka、Consul 5、网关：Zuul、SpringCloud Gateway 6、服务容错：Hystrix 7、服务框架：SpringBoot、Dubbo 8、异步编程：Vert.x、CompleteFuture、RxJava 9、任务调度：XXL-JOB、Crontab 10、数据库：MySQL 11、文档数据库：MongoDB 12、列数据库：HBase、Cassandra 13、全文数据库：EleasticSearch 14、缓存数据库：Redis、Memcached 15、应用缓存：Caffeine、Ehcache、Guava Cache 16、数据库中间件：Sharding-Sphere、MyCat 17、消息中间件：RabbitMQ、RocketMQ、Kafka 18、大数据处理：Flink 19、服务网格：Istio  50、Linux命令 51、容器编排：k8s 52、代码管理：Git  101、用户认证：OAuth 199、性能分析大纲 200、性能测试工具：Apache ab、JMeter、Locust、JMH 201、CPU性能分析 202、GC性能分析 203、内存和线程性能分析 204、日志管理：ELK+Filebeat+Kafka、Logback 205、调用链追踪：SkyWalking、Cat 206、指标监控：Prometheus + Grafana 207、监控告警系统 208、自制监控大盘 209、监控系统大纲  900、系统异常排查方法 901、系统常见异常 902、JVM设置 903、代码结构 904、接口设计 905、系统整体设计 906、架构参考文档 907、系统设计案例  "},{"id":37,"href":"/docs/poet/loadbalance/","title":"负载均衡与反向代理","section":"服务端技术","content":"负载均衡与反向代理 #  知识点 #   如何实现负载均衡：  DNS实现地理级别负载均衡；硬件（F5）实现集群层面负载均衡；软件（Nginx/OpenResty、LVS）实现机器级别负载均衡。   为什么不能使用DNS轮询实现负载均衡  旧浏览器在访问一个IP失败后就会停止访问下一个IP地址   如何实现高可用  双机主备模式：DNS绑一个VIP + 双keepalived/Nginx。一台Nginx通过VIP提供服务，另一台仅作为备机。 双机主主模式：DNS绑两个VIP + 双keepalived/Nginx。两台Nginx通过两个VIP同时提供服务，互相作为备机。   如何添加新机器 何时需要添加新机器 如何监视Nginx的状态  最佳实践 #  负载均衡 #  DNS 负载均衡 #  用于实现地理位置级别的均衡，如北京用户访问北京机房。原理是 DNS 解析同一个域名可以访问不同 IP 地址。\n硬件负载均衡 #  F5和 A10\n软件负载均衡 #  Nginx 和 LVS\n Nginx 是软件的7层负载均衡，支持 HTTP，Email 协议 LVS 是 Linux 内核的4层负载均衡，和协议无关  Nginx 的底层模块一般都是用 C 语言写的，如果我们想在 Nginx 的基础之上写业务逻辑，还得借助 OpenResty。\nOpenResty 是一个基于 Nginx 与 Lua 的高性能 Web 平台，它使我们具备在 Nginx 上使用 Lua 语言来开发业务逻辑的能力。\n反向代理 #  "},{"id":38,"href":"/docs/poet/server/","title":"Web服务器","section":"服务端技术","content":"Web服务器 #  知识点 #  Tomcat #   何时修改连接数  CPU利用率过低，QPS上不去    最佳实践 #  Tomcat配置\n# NIO ## 最大连接数，超过的请求会进入队列，默认值为10000，应大于acceptCount+maxThreads。 max-connection: 8192 ## 最大线程数，默认值200。 max-threads: 150-200 ## 等待队列，默认值100。 accept-count: 1000 ## 核心线程数，默认值10。 min-spare-threads: 50-100 ## 连接超时时间，默认值20。 connection-timeout: 10s Tomcat #  Jetty #  "},{"id":39,"href":"/docs/poet/config/","title":"配置管理","section":"服务端技术","content":"配置管理 #  知识点 #  Apollo\n 长轮询+推拉结合：客户端和服务端通过长轮询连接；服务端有新配置会推送给客户端；客户端也会定时进行拉取操作避免遗漏； 多级缓存：客户端会将配置文件在内存和本地磁盘上各保存一份；每次获取配置项时优先从内存取； 作用：动态配置，功能开关  最佳实践 #  Apollo #   本地配置文件按 application.yml、application-db.yml 等来进行功能分组，其中db等后缀对应Apollo上的namespace。 在Apollo上创建应用后，将app.id配置在application.yml中。 在Apollo上创建namespace进行分组配置以及配置的继承。 将ConfigServer部署为集群。  SpringBoot #  bootstrap.yml\nspring:  profiles:  active: dev 该配置会自动启用application-dev.yml文件，也可以在运行项目时通过命令 -Dspring.profiles.active=dev  启用。\n"},{"id":40,"href":"/docs/poet/discovery/","title":"服务发现","section":"服务端技术","content":"服务发现 #  知识点 #  Eureka\n 续约：Eureka每30秒会通过心跳进行续约，并更新注册表。 失效剔除：Eureka Server每隔60秒将90秒内没有续约的服务剔除。 自我保护：当15分钟内Eureka Server发现心跳失败比例低于85%时（即无法和一定数量的客户端通信时），会暂时停止剔除失效服务，且新服务的注册不会被同步到其它节点。 Eureka Client定时拉取Eureka Server上的服务器信息，所以无法保证实时性。  最佳实践 #   Eureka  高可用  多个Eureka Server互相注册，可以通过zone将相同机房连接为一组。   如何应对Eureka无法及时将下线服务剔除  使用Ribbon时，设置MaxAutoRetriesNextServer=1，让Ribbon在调用失败时自动尝试下一个节点。 调整Eureka的拉取频率。      "},{"id":41,"href":"/docs/poet/gateway/","title":"网关","section":"服务端技术","content":"网关 #  知识点 #  网关功能\n 单点入口 路由转发 限流熔断 日志监控 安全认证  最佳实践 #   所有请求异步化；网关层属于高并发场景，一定比例的请求超时就会让所有调用的RT升高。异步化可以隔离请求间的影响；  具体来说就是Servlet线程完成前置校验后使用Http Nio Client发起远程调用，回收Servlet线程；待获得响应后，由Worker线程池完成数据的后续处理；    "},{"id":42,"href":"/docs/poet/tolerance/","title":"服务容错","section":"服务端技术","content":"服务容错 #  知识点 #  容错模式\n 超时：限制请求的最大处理时间。 限流：限制最大并发数。 熔断：错误数到达阀值时进行特殊处理。 隔离：隔离不同依赖调用。 降级：服务不可用时降级，熔断是降级的一种实现方式。  80%的容错都可以直接可以在网关层解决。\n最佳实践 #  Nginx层\n Nginx 中包含了两个限流模块：ngx_http_limit_conn_module 和 ngx_http_limit_req_module，前者是用于限制单个 IP 单位时间内的请求数量，后者是用来限制单位时间内所有 IP 的请求数量。  应用层\n Zuul RateLimit 或 Guava RateLimiter  Sentinel #  得物配置的熔断规则\n Sentinel的慢调用比例熔断规则统计的时候，不是等到滑动窗口结束了再去根据这一整个窗口的数据来做判断，而是每次请求都会做判断。\n比如拿最上面的配置规则来做例子的话，如果当前窗口的刚开始的前几个请求中（大于5）慢调用比例刚好超过了50%，那么就会触发熔断，断路器直接打开，3s内的所有请求都走降级，然后3s后断路器进入半开状态，如果下一个请求正常了，那么断路器就关闭。\nresilience4j #  "},{"id":43,"href":"/docs/poet/server_framework/","title":"服务框架","section":"服务端技术","content":"服务框架 #  知识点 #  Dubbo\n 基本组件  Container：服务运行容器，默认为Jetty。 Provider：服务的提供方，启动后会向Registry进行注册。 Consumer：服务消费方，启动后向注册中心获取订阅列表，Registry会定时推送变更。 Register：注册中心，短暂宕机不会受到影响。可以使用Zookeeper、multicast、redis或simple。 Monitor：定时统计服务调用次数和时间的监控中心。   负载均衡策略：随机（默认）、轮询、最少活跃、一致性Hash。 集群容错：快速失败、自动切换节点、忽略失败、失败自动回复、并行广播（一个成功）、逐个广播（全部成功） 支持协议：dubbo（默认）、rmi、webservice、http、hessian(http)、http表单提交、memcache、redis  最佳实践 #  Http\nDubbo\n dispatcher：all或message。默认all，协议派发方式。 threadpool：fix。默认，线程池类型。 threads：150-200。默认200，业务线程池大小。 iothreads：默认CPU核心数+1，I/O线程池大小。 queues：默认0，业务线程池配合的等待队列大小。 大文件顺畅：hessian协议 高并发小数据量用dubbo协议，大数据量用http协议。  SpringBoot #  Dubbo #  "},{"id":44,"href":"/docs/poet/job/","title":"任务调度","section":"服务端技术","content":"知识点 #  最佳实践 #  XXL-JOB\n 高可用  调度中心通过Nginx负载均衡 Nginx结合keepalived    "},{"id":45,"href":"/docs/poet/mq/","title":"消息中间件","section":"服务端技术","content":"消息中间件 #  消息队列中间件的对比 #   性能  Kafka：几十万级别。通过批量和异步获得高吞吐量，时延也较高。如果每秒数据量没那么多情况下时延会很高，不太适合在线业务场景。在大数据和流计算方面生态优秀。允许n-1个节点失败。 RocketMQ：几十万级别。时延低。 RabbitMQ：十万级别。消息堆积会引起性能下降。   基本架构  Kafka：Producer、Consumer、Consumer Group、Broker、一个Topic多个Partition RocketMQ：Producer、Consumer、Consumer Group、一个Topic多个Queue RabbitMQ：Exchange、Channel、Producer、Consumer、Queue   推拉模式  Kafka：基于长轮询的拉模式。 RocketMQ：支持推拉，但拉模式也是基于长轮询。 RabbitMQ：支持推拉模式。   消费者数量  Kafka：线程数量和partition数量保持一致，一个partition只能被同组的一个消费者消费。 RocketMQ：同Kafka。   消费语义  Kafka：最多一次，最少一次（推荐），正好一次。正好一次是通过transaction幂等使broker确保同样消息只落地一次，消费端不保证。 RabbitMQ：最少一次，最多一次。   一条消息被多个消费者消费  Kafka：多个consumer group消费同一个partition。Consumer Group中的consumer是竞争关系。 RocketMQ：多个consumer group消费同一queue。Consumer Group中的consumer是竞争关系。 RabbitMQ：每个消费者一个Queue，通过Exchange将一条消息投递到多个Queue中。消费时不指定队列，而是指定Exchange。   消息激增扩容  Kafka：增加partition数量和consumer数量。旧partition里的消息不会重新分配，新partition只会新消息有用。   消息何时被删除  Kafka：基于过期时间删除消息，没有过期时无论是否被消费都会被保存。 RocketMQ:不会被立即删除。   消息失败重试  Kafka：不支持重试 RocketMQ：支持定时重试   消息顺序  Kafka：partition有序，但Broker宕机后就会产生乱序。 RocketMQ：queue有序，支持严格顺序，一台Broker宕机后发送消息会失败，但不会乱序。   消息回溯  Kafka：按Offset回溯。 RocketMQ：按时间回溯（精确到毫秒）   事务支持  Kafka：支持。提交事务时失败则抛出异常。 RocketMQ：支持。提交事务时失败后，中间件可通过反查接口查询事务状态。 RabbitMQ：支持。   Topic和队列设置数量  Kafka：分区数量=Topic的吞吐量/Consumer的吞吐量。单机上一个partition一个目录，由多个segement文件组成。读写消息就是从某一个offset开始顺序读写。当partition数量过多时Load就会更高，写入消息的响应时间就会变慢。 RocketMQ：一个应用一个Topic，支持通过Tags在broker端实现消息过滤以区分不同功能。单机上每个队列一个文件，不会因队列增大Load发生明显变化。 RabbitMQ：由Exchange决定消息如何被投递。   水平扩展  RabbitMQ：routeingkey作为分片键绑定不同queue。    最佳实践 #    通用方案\n 数据同步服务：消息实时推，然后通过定时拉取进行兜底，防止中间件宕机。    如何分配主题\n 有顺序要求的事件应放在同一主题且分区键相同 系统中一个实体另一个实体或两个实体常放在一起使用也应该放在同一主题 消费者常常订阅一组特定的主题时应该将这些主题合并    Kafka\n broker.id设为IP最后一位 log.dirs所有broker设为一样 num.partions将partions的备份个数默认设为1 历史消息保留不超过1个月 分区数和节点数相近，replica为3 队列按系统名_业务名_操作名命名 group.id单机部署采用应用名，集群部署采用应用名+编号，不同应用消费同一topic则设为topic名 offset不自动提交，由Kafka管理offset    RocketMQ\n 同步刷盘：flushDiskType=SYNC_FLUSH 可靠性投递至少发送到2个以上节点 通过tag在broker端实现消息过滤    基础知识 #  1、消费模型 #   队列模型：同一队列上的消费者处于竞争状态。一条消息只能被一个消费者消费。RabbitMQ采用该模型。 发布-订阅模型：基于主题订阅，一条消息可以被多个消费者消费。大部分消息中间件采用该模型。  2、分区模型 #  Kafka的partition或RocketMQ的Queue主要为了提高吞吐量实现并行消费，进行水平扩展。此外也可以解决手动提交时因为前面的消息没有被消费后面的消息一直都不能被消费的情况。\nRabbitMQ #  "},{"id":46,"href":"/docs/poet/bigdata/","title":"大数据","section":"服务端技术","content":"知识点 #   Spark：离线数据清洗、加工。 Flink：实时计算。 Impala：交互式查询。 Yarn：计算资源调度。  最佳实践 #  Flink #  "},{"id":47,"href":"/docs/poet/test/","title":"测试与性能分析","section":"服务端技术","content":"性能分析大纲 #  什么时候开始调优 #   项目开发初期更注重开发进度，完成业务功能为先。 开发完成后，根据产品预估的线上数据规模进行性能测试，查看性能是否在预期范围内。 项目上线后，根据运维平台的日志监控以及性能统计日志检测分析系统性能。  压力测试工具 #   Apache的ab。注意Mac自带的有并发数量限制，需要重新编译。 基于Java的JMeter 基于Scala的Gatling 手写Python  性能测试指标 #   CPU性能  利用率：单位时间内一个线程或进程实时占用CPU的百分比。 系统负载：单位时间内正在运行或等待的进程或线程数。代表系统繁忙程度。 利用率和负载的关系  CPU密集型系统负载未必会高，但CPU利用率肯定高。 I/O密集型CPU利用率可能不高，但系统负载会很高，因为有很多线程会等待I/O读写完毕。 CPU利用率高负载低：可能计算复杂但任务就一个。 CPU利用率低负载高：可能计算简单但等待I/O的任务数量多。     可用性  99.99%：4个9表示全年不可用时间少于52.6分钟。用于核心服务指标。 99.9%：3个9表示全年不可用时间少于年8小时。用于一般服务指标。 RTO：RecoveryTimeObjective，故障恢复时间。 RPO：RecoveryPointObjective，故障恢复程度。如果数据时按日备份则最多丢失1天数据。   接口性能  QPS：接口的一次请求到服务器的返回结果。  PV=预估用户数UV x 每用户访问接口数量，PV/8小时=QPS。   TPS：代表一次用户操作到服务器的返回结果，可以包含多个请求。 RT：响应时间。常见指标为AVG平均响应、95线和99线。 99%：99%个请求所表示的性能范围。95线和99线与AVG线越相近证明性能越平稳。99线可能是由于该用户使用系统最频繁的用户，因此数据最多，性能最慢，所以也不能忽略其响应速度。   数据库性能  执行时间。   GC性能  停顿时间（延迟）：停顿时间越短响应速度越高，用户体验越好。由于多线程GC的原因，一般real远低于user+sys。  调小GC开始阀值。 增加并发标记线程数量。 调整停顿时间。 控制堆大小。 增加机器内存大小。 增加年轻代大小。 降低老年代提升次数。 加大脏卡大小。 减少I/O数量。   吞吐量：吞吐量越高越能更快完成任务，特别是后台长时间批处理任务。通常应该达到95%以上。  增加GC开始阀值。 减少并发标记线程数量。 调整吞吐量大小。   对象创建速率：速度越快越可能发生GC。 STW：CMS在YGC、初始标记、最终标记、FGC时会产生STW。G1在YGC、初始标记、标记、Mixed、清理、FGC时会产生STW。    性能分析工具 #  综合性能分析工具 #  Arthas\n thread命令可排查线程死锁、CPU过高等问题。 sc可以查找加载的类信息，sm可以查找加载的函数信息，可以用于排查线上jar包版本是否正确。 jad可反编译代码。 watch可监测指定方法的参数、返回值和异常信息。 trace可监测方法的调用链，展示每个调用的耗时，找出最耗时的方法。 profiler可生成火焰图，监测CPU运行情况和函数调用频率。 ognl可配合用来执行动态代码。  GC性能分析工具 #   jstat  jstat -gcutil \u0026lt;pid\u0026gt; \u0026lt;sec\u0026gt; 查看应用启动到现在的GC情况   jmap  jmap -heap \u0026lt;pid\u0026gt;   GCeasy GCViewer  CPU性能分析工具 #   async-profiler 火焰图。通过采样可以分析出调用次数最多的函数。  内存性能分析工具 #   jmap：通过比较多次dump的内存数据可以找出内存泄露代码。 VisualVM MAT  线程性能分析工具 #   jstack：查看线程堆栈和死锁信息。  现象分析 #  GC性能 #  real \u0026gt; user + sys #  原因分析：\n 后台磁盘I/O繁忙，引起GC日志暂停。  减少机器上其它进程数量。减少日志数量。将日志记录在单独的HDD或SSD磁盘上。   没有足够的CPU资源来运行。  减少机器上其它进程数量。    sys \u0026gt; user #  原因分析：\n 操作系统出现问题。  检查内存、磁盘、操作系统是否工作正常。   虚拟机没有足够资源运行。 内存不足，没有连续的页空间，引起页移动。 磁盘I/O压力过大。  垃圾回收原因 #   Allocation Failure：年轻代没有足够空间分配内存。  增加年轻代大小。   Promotion Failure：年轻代对象无法提示到老年代，可能老年代空间不足或存在大量碎片，必须STW。 Concurrent Mode Failure：并发回收失败。CMS无法及时完成对象的收集就会退化为旧的并行收集器进行FGC。  增加老年代大小。 设置 CMSInitiatingOccupancyFraction 为较低的值让CMS提前启动以及将-XX:+UseCMSInitiatingOccupancyOnly 设为true让CMS每次都采用设定的阀值。需要注意如果CMSInitiatingOccupancyFraction 太低就会频繁进行GC。   Metadata GC Threshold：元数据GC阀值。元空间太小或存在类加载器泄露（可能性很小）。  设置 -XX:MetaspaceSize 来增加元空间大小。   G1 Humongous Allocation：G1大对象分配。大对象指大小超过region一半的对象。频繁分配大对象会导致两个性能问题：大对象不足region空间的部分成为碎片，不会被使用；JDK 1.8u40之前大对象空间只在FGC时回收  设置 -XX:G1HeapRegionSize 增加region大小，避免对象超过region的50%成为大对象，值需要为2的倍数，且范围为1-32mb之间。默认情况下，region大小是在启动期间根据堆大小计算的。   G1 Evacuation Pause：G1疏散暂停，发生在region复制时。YGC和Mixed GC时会将存活对象从一组region复制到另一组region，如果此时空间不足就会触发FGC。  内存方面只设置堆的最小或最大空间以及暂停时间，避免手动设置年轻代和老年代大小。 如果问题仍然存在，增加堆大小。 如果无法增加堆大小，并且标记周期开始过晚，可以减少 -XX:InitiatingHeapOccupancyPercent 的值。默认值为45%，表示内存利用达到45%时才开始标记循环。如果标记周期开始较早且未回收，则将 -XX:InitiatingHeapOccupancyPercent 阈值提高到默认值以上。 设置 -XX:ConcGCThreads 来增加并发标记的线程数量。 设置 -XX:G1ReservePercent 参数的值。默认值为10%，上限为50%。这意味着G1垃圾收集器将始终保持10%的内存可用。增加此值时，GC将提前触发，从而阻止疏散暂停。    调优参数 #  调优策略\n 降低Minor GC频率：增大新生代空间，标记时间的成本低于复制的成本 降低FGC频率：增加堆内存大小，减少大对象创建 Biz日志影响GC  通用参数\n 最小堆最大堆设为一样，4G到8G间； 预分配内存； 降低老年代提升次数为3； 加大脏卡大小为1024; GC日志写入单独磁盘上； 不独占机器时，降低并行线程数量； 并发标记线程数增加为并行线程数的一半； 增大 Integer Cache；  CMS参数\n 新生代老年代配为1比1； 内存满75%就开始CMS； System.gc()也使用CMS；  G1参数\n 延迟时间再200ms（默认）到500ms之间； 调整吞吐量，默认为12，92%时间在应用上。20表示95%时间应用于应用线程； 删除存活时间较长的重复字符串； 调整Mixed GC标记起始阀值，默认为45%；  接口性能 #  应用长暂停 #  请求未在合理时间内返回。\n原因分析：\n 对象创建速率过高，引起频繁GC。  控制对象创建速率，复用对象。   年轻代太小，过早提升到老年代。  增加年轻代大小。   内存不足，发生磁盘I/O的进程切换。  减少机器上其它进程数量，或增加内存大小。   real近似user+sys，GC线程太少。  增加GC线程数量。   后台磁盘I/O繁忙，引起GC日志暂停。  减少机器上其它进程数量。   显式System.gc()采用了FGC。  可配置 ``-XX:+DisableExplicitGC  禁用显式GC。   堆空间过大，每次扫描时间太长。  控制堆大小最好为8G-16G。   GC工作量分配不均匀，如数据结构不支持并发扫描，并发分配失败等。  可配置 -XX:+CMSScavengeBeforeRemark    内存溢出 #  内存泄露 #  指对象无法被正确回收，随着时间流逝越来越多。\n检查方法：\n jmap多次dump后，对比数据。泄露的对象会越来越多，不会被回收。  "},{"id":48,"href":"/docs/poet/devops/","title":"Devops","section":"服务端技术","content":"Devops #  "},{"id":49,"href":"/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Blog","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates #  Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax #  Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}  Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}  Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}  Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}  Variables #  Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;  Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }}  Functions #  Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}  Includes #  When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}  Logic #  Go templates provide the most basic iteration and conditional logic.\nIteration #  Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }}  Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }}  Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }}  Conditionals #  If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}  Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}  Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}  Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Pipes #  One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}  is the same as\n{{ eq 1 1 | if }} Same {{ end }}  It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}  Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }}  Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }}  Context (aka. the dot) #  The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }}  Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters #  Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters #  In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026#34;Permalinks\u0026#34; date: \u0026#34;2013-11-18\u0026#34; aliases: - \u0026#34;/doc/permalinks/\u0026#34; groups: [\u0026#34;extras\u0026#34;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n {{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }}  Using Site (config) Parameters #  In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams:  CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34;  TwitterUser: \u0026#34;spf13\u0026#34;  SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34; alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"id":50,"href":"/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":"Step 1. Install Hugo #  Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs #  Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop  Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site #  Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop  Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms  Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun #  The best way to learn something is to play with it.\n"},{"id":51,"href":"/docs/poet/tolerance/sentinel/","title":"Sentinel","section":"服务容错","content":"Sentinel #  得物配置的熔断规则\n Sentinel的慢调用比例熔断规则统计的时候，不是等到滑动窗口结束了再去根据这一整个窗口的数据来做判断，而是每次请求都会做判断。\n比如拿最上面的配置规则来做例子的话，如果当前窗口的刚开始的前几个请求中（大于5）慢调用比例刚好超过了50%，那么就会触发熔断，断路器直接打开，3s内的所有请求都走降级，然后3s后断路器进入半开状态，如果下一个请求正常了，那么断路器就关闭。\n"},{"id":52,"href":"/docs/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":"Buttons #  Buttons are styled links that can lead to local page or external link.\nExample #  {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}}  Get Home  Contribute  "},{"id":53,"href":"/docs/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":"Columns #  Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne...  \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt;  # Mid Content Lorem markdownum insigne...  \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt;  # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example #  Left Content #  Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.  Mid Content #  Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!  Right Content #  Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.   "},{"id":54,"href":"/docs/shortcodes/details/","title":"Details","section":"Shortcodes","content":"Details #  Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample #  {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content #  Lorem markdownum insigne\u0026hellip;   "},{"id":55,"href":"/docs/shortcodes/expand/","title":"Expand","section":"Shortcodes","content":"Expand #  Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample #  Default #  {{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}   Expand ↕  Markdown content #  Lorem markdownum insigne\u0026hellip;    With Custom Label #  {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}   Custom Label ...  Markdown content #  Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.    "},{"id":56,"href":"/docs/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":"Hints #  Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example #  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  "},{"id":57,"href":"/docs/shortcodes/katex/","title":"Katex","section":"Shortcodes","content":"KaTeX #  KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample #  {{\u0026lt; katex [display] [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}}     Display Mode Example #  Here is some inline example:  \\(\\pi(x)\\)  , rendered in the same line. And below is display example, having display: block  \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\]  Text continues here.\n"},{"id":58,"href":"/docs/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":"Mermaid Chart #   MermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid Initialization Config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\n Example #  {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} stateDiagram-v2  State1: The state with a note  note right of State1  Important information! You can write  notes.  end note  State1 --\u0026gt; State2  note left of State2 : This is the note to the left. {{\u0026lt; /mermaid \u0026gt;}}     "},{"id":59,"href":"/docs/shortcodes/section/","title":"Section","section":"Shortcodes","content":"Section #  Section renders pages in section as definition list, using title and description.\nExample #  {{\u0026lt; section \u0026gt;}}   First Page  First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.   Second Page  Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.   "},{"id":60,"href":"/docs/shortcodes/section/first-page/","title":"First Page","section":"Section","content":"First page #  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":61,"href":"/docs/shortcodes/section/second-page/","title":"Second Page","section":"Section","content":"Second Page #  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":62,"href":"/docs/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":"Tabs #  Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example #  MacOS MacOS #  This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux #  This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows #  This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n "}]