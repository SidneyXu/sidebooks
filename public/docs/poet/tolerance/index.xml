<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>服务容错 on 编程之诗</title>
    <link>http://example.org/docs/poet/tolerance/</link>
    <description>Recent content in 服务容错 on 编程之诗</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://example.org/docs/poet/tolerance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hystrix</title>
      <link>http://example.org/docs/poet/tolerance/hystrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/tolerance/hystrix/</guid>
      <description>Hystrix #  使用方式 #  所有对外发起调用的地方，client配置在类上进行降级，直接返回错误或统一的服务繁忙，请稍候再试
断路器原理 #  通过断路器实现，基于滚筒式统计，每秒一个桶，默认10个桶（10s）一个统计周期，统计每个桶内调用成功和失败次数来决定是否打开断路器。一旦打开后每5s进入半开状态放过一个请求，请求成功后关闭断路器。
Fall back方式 #   fail fast：错误时返回异常。 fail silent：错误时返回空数据。 static fallback：错误时返回缺省值。 fallback via network：错误时调用备用服务。 primary+secondary with fallback：新功能上线在secondary，先走老功能primary。  隔离方式 #   线程池隔离：每个任务采用独立的线程，支持排队超时等特性。适合线程数量可控以及调用不了解性能的第三方服务。主要用于服务间调用，数据库访问。 信号量隔离：相同任务使用同一线程，不支持排队超时等特性。适合高扇出的场景和高性能的内部应用。主要用于网关和缓存。  Turbine #  Turbine用于汇总多个Hystrix客户端提供的stream信息。
生产实践 #  对接Eureka
 网关集成Hystrix
 DashBoard使用 #     </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/poet/tolerance/sentinel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/tolerance/sentinel/</guid>
      <description>Sentinel #  得物配置的熔断规则
 Sentinel的慢调用比例熔断规则统计的时候，不是等到滑动窗口结束了再去根据这一整个窗口的数据来做判断，而是每次请求都会做判断。
比如拿最上面的配置规则来做例子的话，如果当前窗口的刚开始的前几个请求中（大于5）慢调用比例刚好超过了50%，那么就会触发熔断，断路器直接打开，3s内的所有请求都走降级，然后3s后断路器进入半开状态，如果下一个请求正常了，那么断路器就关闭。</description>
    </item>
    
  </channel>
</rss>
