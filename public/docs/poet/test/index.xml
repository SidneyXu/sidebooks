<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>测试与性能分析 on 编程之诗</title>
    <link>http://example.org/docs/poet/test/</link>
    <description>Recent content in 测试与性能分析 on 编程之诗</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://example.org/docs/poet/test/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>压力测试</title>
      <link>http://example.org/docs/poet/test/benchmark/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/test/benchmark/</guid>
      <description>性能检测工具 #  压力测试 #  Apache的ab工具 #  主要看95%和99%分位的响应，另外mac默认的ab有BUG。
ab -n &amp;lt;请求数&amp;gt; -c &amp;lt;并发数&amp;gt; &amp;lt;url&amp;gt; 举例
ab -n 10000 -c 1000 -p &amp;#39;params.txt&amp;#39; -T &amp;#39;application/json&amp;#39; &amp;#39;http://localhost:8080/api/clients/register&amp;#39; 输出结果
This is ApacheBench, Version 2.3 &amp;lt;$Revision: 1879490 $&amp;gt; Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/  Benchmarking 127.0.0.1 (be patient) Completed 1000 requests Completed 2000 requests Completed 3000 requests Completed 4000 requests Completed 5000 requests Completed 6000 requests Completed 7000 requests Completed 8000 requests Completed 9000 requests Completed 10000 requests Finished 10000 requests   Server Software: Server Hostname: 127.</description>
    </item>
    
    <item>
      <title>基准测试</title>
      <link>http://example.org/docs/poet/test/jmh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/test/jmh/</guid>
      <description>JMH #  测试代码执行效率如果碰到普通循环语句中。在其内部进行打印是没办法很好的测试出性能，因为会存在编译器优化，没办法实现性能测试需要达到的功能。 不过，JMH 也不能完美解决性能测试数据的偏差问题。它甚至会在每次运行的输出结果中打印上述语句，所以，JMH 的开发人员也给出了一个小忠告：我们开发人员不要轻信 JMH 的性能测试数据，不要基于这些数据乱下结论。
压测，重新进行压测,使用chaosblade添加网络丢包,延迟,并且观察grafana上的指标,来确定问题。
使用JMH
生成 JMH 项目
$ mvn archetype:generate \  -DinteractiveMode=false \  -DarchetypeGroupId=org.openjdk.jmh \  -DarchetypeArtifactId=jmh-java-benchmark-archetype \  -DgroupId=org.sample \  -DartifactId=test \  -Dversion=1.21 $ cd test src/main/org/sample/MyBenchmark.java 编译和运行 JMH 项目
$ mvn compile $ ls target/generated-sources/annotations/org/sample/generated/ MyBenchmark_jmhType.java MyBenchmark_jmhType_B1.java MyBenchmark_jmhType_B2.java MyBenchmark_jmhType_B3.java MyBenchmark_testMethod_jmhTest.java 接下来可以运行mvn package命令，将编译好的 class 文件打包成 jar 包。生成的 jar 包同样位于target目录下，其名字为benchmarks.jar。jar 包里附带了一系列配置文件，如下所示：
打包生成的 jar 包可以直接运行。具体指令如下所示：
$ java -jar target/benchmarks.jar 这里指的是 JMH 会 Fork 出一个新的 Java 虚拟机，来运行性能基准测试。 在这种情况下，通过运行更多的 Fork，并将每个 Java 虚拟机的性能测试结果平均起来，可以增强最终数据的可信度，使其误差更小。在 JMH 中，你可以通过@Fork注解来配置，具体如下述代码所示：</description>
    </item>
    
    <item>
      <title>CPU和线程的性能分析</title>
      <link>http://example.org/docs/poet/test/cpu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/test/cpu/</guid>
      <description>CPU和线程的性能分析 #  </description>
    </item>
    
    <item>
      <title>内存和硬盘的性能分析</title>
      <link>http://example.org/docs/poet/test/memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/test/memory/</guid>
      <description>内存和硬盘的性能分析 #  </description>
    </item>
    
    <item>
      <title>JVM的性能分析</title>
      <link>http://example.org/docs/poet/test/jvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/test/jvm/</guid>
      <description>JVM的性能分析 #  </description>
    </item>
    
  </channel>
</rss>
