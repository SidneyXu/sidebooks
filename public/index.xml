<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on 编程之诗</title>
    <link>http://example.org/</link>
    <description>Recent content in Introduction on 编程之诗</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Sep 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Apollo</title>
      <link>http://example.org/docs/poet/config/apollo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/config/apollo/</guid>
      <description>Apollo #  应用通过app.id绑定Apollo上的配置。通过Apollo服务器按指定namespace覆写对应的application.yml文件。
原理 #  服务端 #   Config Server一般配置多个，客户端通过 Eureka 服务发现连接该配置集群。为了解决其它语言没有Eureka的问题，Apollo引入了 MetaService，添加了一层代理层来完成服务发现。
当修改数据后Portal会调用AdminService，AdminService会往DB中插入一条消息记录，ConfigService会定时扫描该表，有新记录则通知客户端。服务端和客户端之间使用长轮询维持连接。之所以没有引入消息队列是为了保持架构简单，减少复杂性。
客户端 #   推拉结合：客户端和服务端保持一个长连接，配置实时推送 ；为了避免遗漏，客户端也会定期拉取(fallback)。 配置缓存在内存：本地再缓存一份。 应用程序：通过Apollo客户端获取最新配置；订阅配置更新通知。  基本概念 #    应用 application：配置唯一的appid
  环境 environment：dev/fat/uat/pro
  集群 cluster：一个应用不同实例的分组，主要用于不同的数据中心
  命名空间 namespace：一个应用下不同配置的分组，默认分组为application；一般按照功能分组，如数据库配置，消息队列配置，应用配置；也可以引用不属于任何服务的公共配置，如线程池数量等
 命名空间分类：私有，公有（需全局唯一），关联（私有继承公有） 私有命名空间会覆盖公共命名空间。不同命名空间应用中先定义的先使用。    配置项item：支持kv，json，xml，定位方式如下：
 私有配置env+app+cluster+namespace+item_key 公有配置env+cluster+namespace+item_key    权限
  Portal页面 #  基本页面
 通过文本方式编辑配置，方便进行大量修改
 可以查看已连接到Apollo的实例
 </description>
    </item>
    
    <item>
      <title>Cassandra</title>
      <link>http://example.org/docs/poet/db/colsql/cassandra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/db/colsql/cassandra/</guid>
      <description>Cassandra #  </description>
    </item>
    
    <item>
      <title>Dubbo</title>
      <link>http://example.org/docs/poet/server_framework/dubbo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/server_framework/dubbo/</guid>
      <description>Dubbo #  </description>
    </item>
    
    <item>
      <title>ElastisSearch</title>
      <link>http://example.org/docs/poet/db/fullsql/es/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/db/fullsql/es/</guid>
      <description>ElastisSearch #  </description>
    </item>
    
    <item>
      <title>Eureka</title>
      <link>http://example.org/docs/poet/discovery/eureka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/discovery/eureka/</guid>
      <description>Eureka #  原理 #  Eureka Client定期从Eureka Server获取配置保存到缓存中。应用调用其它服务时会从本地缓存中获取可用的服务器。
基本概念 #   Eureka Client：集成在客户端中，用于进行服务注册和服务发现，Client既可以是Service Provider也可以是Service Consumer。Client会优先访问位于同一个Zone里的Service Consumer。 Eureka Server：Eureka 服务端，提供页面查看功能，搭建多个服务端集群时需要将自己也注册到Eureka Server上。 自我保护机制：开启配置后，如果Eureka Server无法和一定数量Eureka Client进行连接时，停止新服务注册和服务踢出功能，待连接恢复正常，主要为了防止网络抖动将正常服务踢出。 Ribbon：客户端负载均衡。  生产实践 #    </description>
    </item>
    
    <item>
      <title>Hystrix</title>
      <link>http://example.org/docs/poet/tolerance/hystrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/tolerance/hystrix/</guid>
      <description>Hystrix #  使用方式 #  所有对外发起调用的地方，client配置在类上进行降级，直接返回错误或统一的服务繁忙，请稍候再试
断路器原理 #  通过断路器实现，基于滚筒式统计，每秒一个桶，默认10个桶（10s）一个统计周期，统计每个桶内调用成功和失败次数来决定是否打开断路器。一旦打开后每5s进入半开状态放过一个请求，请求成功后关闭断路器。
Fall back方式 #   fail fast：错误时返回异常。 fail silent：错误时返回空数据。 static fallback：错误时返回缺省值。 fallback via network：错误时调用备用服务。 primary+secondary with fallback：新功能上线在secondary，先走老功能primary。  隔离方式 #   线程池隔离：每个任务采用独立的线程，支持排队超时等特性。适合线程数量可控以及调用不了解性能的第三方服务。主要用于服务间调用，数据库访问。 信号量隔离：相同任务使用同一线程，不支持排队超时等特性。适合高扇出的场景和高性能的内部应用。主要用于网关和缓存。  Turbine #  Turbine用于汇总多个Hystrix客户端提供的stream信息。
生产实践 #  对接Eureka
 网关集成Hystrix
 DashBoard使用 #     </description>
    </item>
    
    <item>
      <title>Kafka</title>
      <link>http://example.org/docs/poet/mq/kafka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/mq/kafka/</guid>
      <description>Kafka #  1、基本概念 #   基于拉模型，offset默认保存在Zookeeper上，也可以手动保存。 基于ZooKeeper实现了动态扩容功能。 生产者不会立即发送消息，而是将消息攒一批发送。Broker将其作为一个整体处理，由消费者将批量消息解开。  2、使用方法 #   在设定consumer group的时候，只需要指明consumer数量即可，无需指定partition，consumer会自动进行rebalance。 producer端发送消息时只需指定topic，无需指定partition，Kafka会把收到的message进行load balance，均匀的分布在这个topic下的不同的partition上。  3、集群 #  3.1、扩容 #  当添加新的partition的时，原partition里面的message不会重新进行分配，只有进入topic的新message才会通过load balance添加到新的partition。
3.2、重平衡 #  重平衡发生情况
 Partition扩容 消费者数量发生变更 订阅的规则发生变更（基于正则订阅，新创建的主题也符合规则）会发生重平衡。  重平衡时Kafka不可用。可以通过提高session.timout.ms和max.poll.interval.ms的值和降低heartbeat.interval.ms的值减少重平衡次数。</description>
    </item>
    
    <item>
      <title>Linux</title>
      <link>http://example.org/docs/poet/devops/linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/devops/linux/</guid>
      <description>Linux #  网络请求分析 #  tcpdump
上下文切换监控 #   vnstat pidstat  以上两者都属于sysstat包，MAC不可用。
  wireshark：事件记录形式
  tcpdump
  CPU相关 #  top
按CPU利用率排序，按q退出交互
top -o cpu 内存相关 #  vmstat
vmstat &amp;lt;interval&amp;gt; &amp;lt;count&amp;gt;   r：在运行队列中等待执行的进程数；一般每颗CPU的运行队列应控制在3以内； b：在等待I/O的进程数；此时CPU处于空闲状态，所以应越小越好； free：空闲的物理内存(kb) si：从磁盘交换到内存的swap页数量（kb/sec）；当内存满足时是不应该出现大量交换页的； so：从内存交换到磁盘的swap页数量（kb/sec） cs：每秒上下文切换次数 us：用户进程的CPU时间占比 sy：系统进程的CPU时间占比 id：CPU空闲时间占比 wa：等待I/O的CPU时间占比；过高证明瓶颈在I/O而不是CPU资源；  网络相关 #  netstat
磁盘相关 #  iostat
iostat &amp;lt;interval&amp;gt; &amp;lt;count&amp;gt; -tx 报告每秒向终端读取和写入的字符数和CPU的详细信息
  %user：CPU处在用户模式下的时间百分比。 %nice：CPU处在带NICE值的用户模式下的时间百分比。 %system：CPU处在系统模式下的时间百分比。 %iowait：CPU等待输入输出完成时间的百分比。过高表示I/O存在瓶颈； %steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。 %idle：CPU空闲时间百分比。如果%idle值高但系统响应慢时，有可能是CPU等待分配内存，此时应加大内存容量。如果持续低于10，那么系统的CPU处理能力相对较低，表明系统中最需要解决的资源是CPU。 Device：磁盘名称 tps：每秒I/O请求数 kb_read/s：每秒读取的block数。 kb_read：读取的block总数。  sar #  基本概念 #  需安装sysstat包。查看使用方法如下：</description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>http://example.org/docs/poet/db/docsql/mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/db/docsql/mongodb/</guid>
      <description>MongoDB #  </description>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>http://example.org/docs/poet/db/sql/mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/db/sql/mysql/</guid>
      <description>MySQL #  1、基本使用 #  1.1、查看当前所有连接 #  show processlist; 客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。
 show variables like &amp;#39;wait_timeout’; 上面返回的单位为秒。如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒： Lost connection to MySQL server during query。这时候如果你要继续，就需要重连，然后再执行请求了。
2、高可用方案 #  2.1、MySQL Replication + MHA #  美团MHA MHA只负责MySQL主库的高可用。主库发生故障时，MHA会选择一个数据最接近原主库的候选主节点（这里只有一个从节点，所以该从节点即为候选主节点）作为新的主节点，并补齐和之前Dead Master 差异的Binlog。数据补齐之后，即将写VIP漂移到新主库上。
MHA脑裂问题 DB服务器的上联交换机出现了抖动，导致主库无法访问，被管理节点判定为故障，触发MHA切换，VIP被漂到了新主库上。随后交换机恢复，主库可被访问，但由于VIP并没有从主库上摘除，因此2台机器同时拥有VIP，会产生脑裂。我们对MHA Manager加入了向同机架上其他物理机的探测，通过对比更多的信息来判断是网络故障还是单机故障。
2.2、MySQL Cluster #  2.3、基于Paxos的MGR版本的MySQL #  3、性能优化 #  3.1、索引设计 #  该在哪种字段上添加索引
show index from &amp;lt;table_name&amp;gt;；   Cardinality：基数，表示字段的区分度。基数为采样统计，当变更的行数超过阀值时会触发重新采样。区分度越高索引越可能被使用。  当MySQL误用索引时
 如果explain分析，如果扫描行数rows和实际行数区别大，就执行analyze table &amp;lt;table_name&amp;gt; 对基数重新采样。 考虑修改语句。 新建一个更合适的索引，让优化器做选择。或者在某种场景下删除误用的索引。 强制使用force_index。  列的区别度越高索引收益越大。查看区分度的方法为 SELECT COUNT(DISTINCT col_name)/COUNT(*) FROM table_name。</description>
    </item>
    
    <item>
      <title>Nginx</title>
      <link>http://example.org/docs/poet/loadbalance/nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/loadbalance/nginx/</guid>
      <description>Nginx #  </description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>http://example.org/docs/poet/db/cache/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/db/cache/redis/</guid>
      <description>Redis #  1、性能监测 #  1.1、如何计算Redis所占内存空间 #   http://www.redis.cn/redis_memory/ 该网站可以用于计算Redis占用的内存空间。
1.2、如何判断Redis性能是否出了问题 #  使用基线性能判断。所谓的基线性能就是一个系统在低压力、无干扰下的基本性能，这个性能只由当前软硬件配置决定。 redis-cli 命令提供了–intrinsic-latency 选项，可以用来监测和统计测试期间内的最大延迟，这个延迟可以作为 Redis 的基线性能。
./redis-cli --intrinsic-latency 120  该命令会打印 120 秒内监测到的最大延迟。一般情况下，运行 120 秒就足够监测到最大延迟了。 然后把运行时延迟和基线性能进行对比，Redis 运行时延迟是基线性能的 2 倍及以上，就可以认定 Redis 变慢了。
1.3、如何排查 Redis 的 bigkey？ #  redis 可以在执行 redis-cli 命令时带上–bigkeys 选项，进而对整个数据库中的键值对大小情况进行统计分析，比如说，统计每种数据类型的键值对个数以及平均大小。
./redis-cli --bigkeys  -------- summary ------- Sampled 32 keys in the keyspace! Total key length in bytes is 184 (avg len 5.75)  //统计每种数据类型中元素个数最多的bigkey Biggest list found &amp;#39;product1&amp;#39; has 8 items Biggest hash found &amp;#39;dtemp&amp;#39; has 5 fields Biggest string found &amp;#39;page2&amp;#39; has 28 bytes Biggest stream found &amp;#39;mqstream&amp;#39; has 4 entries Biggest set found &amp;#39;userid&amp;#39; has 5 members Biggest zset found &amp;#39;device:temperature&amp;#39; has 6 members  //统计每种数据类型的总键值个数，占所有键值个数的比例，以及平均大小 4 lists with 15 items (12.</description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway</title>
      <link>http://example.org/docs/poet/gateway/spring-cloud-gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/gateway/spring-cloud-gateway/</guid>
      <description>Spring Cloud Gateway #  原理 #  基于Netty实现，通过过滤器实现网关功能。
  过滤器分为全局过滤器和网关过滤器。所有过滤器构成一个chain。全局过滤器应用到所有路由中。每个过滤器都可以通过代码实现类似Zuul的Pre，Post，Route过滤器的功能。 FilterFactory用于按配置生产Filter，通过自定义FilterFactory可以在配置文件中按需配置自定义Filter。  </description>
    </item>
    
    <item>
      <title>Tomcat</title>
      <link>http://example.org/docs/poet/server/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/server/tomcat/</guid>
      <description>Tomcat #  </description>
    </item>
    
    <item>
      <title>Vert.x</title>
      <link>http://example.org/docs/poet/server_framework/async/vertx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/server_framework/async/vertx/</guid>
      <description>Vert.x #  </description>
    </item>
    
    <item>
      <title>XXL-Job</title>
      <link>http://example.org/docs/poet/job/xxljob/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/job/xxljob/</guid>
      <description>XXL-Job #  </description>
    </item>
    
    <item>
      <title>压力测试</title>
      <link>http://example.org/docs/poet/test/benchmark/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/test/benchmark/</guid>
      <description>性能检测工具 #  压力测试 #  Apache的ab工具 #  主要看95%和99%分位的响应，另外mac默认的ab有BUG。
ab -n &amp;lt;请求数&amp;gt; -c &amp;lt;并发数&amp;gt; &amp;lt;url&amp;gt; 举例
ab -n 10000 -c 1000 -p &amp;#39;params.txt&amp;#39; -T &amp;#39;application/json&amp;#39; &amp;#39;http://localhost:8080/api/clients/register&amp;#39; 输出结果
This is ApacheBench, Version 2.3 &amp;lt;$Revision: 1879490 $&amp;gt; Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/  Benchmarking 127.0.0.1 (be patient) Completed 1000 requests Completed 2000 requests Completed 3000 requests Completed 4000 requests Completed 5000 requests Completed 6000 requests Completed 7000 requests Completed 8000 requests Completed 9000 requests Completed 10000 requests Finished 10000 requests   Server Software: Server Hostname: 127.</description>
    </item>
    
    <item>
      <title>基准测试</title>
      <link>http://example.org/docs/poet/test/jmh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/test/jmh/</guid>
      <description>JMH #  测试代码执行效率如果碰到普通循环语句中。在其内部进行打印是没办法很好的测试出性能，因为会存在编译器优化，没办法实现性能测试需要达到的功能。 不过，JMH 也不能完美解决性能测试数据的偏差问题。它甚至会在每次运行的输出结果中打印上述语句，所以，JMH 的开发人员也给出了一个小忠告：我们开发人员不要轻信 JMH 的性能测试数据，不要基于这些数据乱下结论。
压测，重新进行压测,使用chaosblade添加网络丢包,延迟,并且观察grafana上的指标,来确定问题。
使用JMH
生成 JMH 项目
$ mvn archetype:generate \  -DinteractiveMode=false \  -DarchetypeGroupId=org.openjdk.jmh \  -DarchetypeArtifactId=jmh-java-benchmark-archetype \  -DgroupId=org.sample \  -DartifactId=test \  -Dversion=1.21 $ cd test src/main/org/sample/MyBenchmark.java 编译和运行 JMH 项目
$ mvn compile $ ls target/generated-sources/annotations/org/sample/generated/ MyBenchmark_jmhType.java MyBenchmark_jmhType_B1.java MyBenchmark_jmhType_B2.java MyBenchmark_jmhType_B3.java MyBenchmark_testMethod_jmhTest.java 接下来可以运行mvn package命令，将编译好的 class 文件打包成 jar 包。生成的 jar 包同样位于target目录下，其名字为benchmarks.jar。jar 包里附带了一系列配置文件，如下所示：
打包生成的 jar 包可以直接运行。具体指令如下所示：
$ java -jar target/benchmarks.jar 这里指的是 JMH 会 Fork 出一个新的 Java 虚拟机，来运行性能基准测试。 在这种情况下，通过运行更多的 Fork，并将每个 Java 虚拟机的性能测试结果平均起来，可以增强最终数据的可信度，使其误差更小。在 JMH 中，你可以通过@Fork注解来配置，具体如下述代码所示：</description>
    </item>
    
    <item>
      <title>CompletableFuture</title>
      <link>http://example.org/docs/poet/server_framework/async/future/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/server_framework/async/future/</guid>
      <description>CompletableFuture #  基本概念
 Runnable：无返回值的函数 Supplier：有返回值的函数 Consumer：接受入参的函数 Function：接受入参且有返回值的函数 CompletionStage: CompletableFuture父类  API接口列表
CompletableFuture&amp;lt;Void&amp;gt; future1 = CompletableFuture.runAsync(runnable, executor);  CompletableFuture&amp;lt;Boolean&amp;gt; future2 = CompletableFuture.supplyAsync(() -&amp;gt; 1)  .thenApply(integer -&amp;gt; integer == 1); Boolean future2Res = future2.get(); 以下常用方法中凡是方法名以Async作为后缀的都是异步方法：
 runAsync(runnable, executor) ：在线程池中执行Runnable。 supplyAsync(supplier, executor） thenRun(runnable)：在当前线程中执行Runnable。 thenAccept(consumer) thenApply(function) exceptionally(function)：当发生异常时如何处理返回值。 thenCompose(function, stage)：组合两个Future。 CompletableFuture.allOf(stage..)：组合多个Future。 get()：阻塞当前线程获得结果。  一般来说通过supplyAsync()提供返回值，thenApply()或thenAccept()处理返回值，exceptionally()处理发生异常时的返回值。</description>
    </item>
    
    <item>
      <title>SpringBoot</title>
      <link>http://example.org/docs/poet/server_framework/springboot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/server_framework/springboot/</guid>
      <description>SpringBoot #  </description>
    </item>
    
    <item>
      <title>代码管理</title>
      <link>http://example.org/docs/poet/devops/code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/devops/code/</guid>
      <description>代码管理 #  分支管理 #  特性分支模式 #   建立多个特性分支feature/001，在特性分支上进行开发 完成开发后，主干拉出发布分支release/001 将需要发布的特性分支合并到发布分支上 上线后，发布分支合并到主干，添加标签，删除发布分支和特性分支 如果某个功能临时不需要，可以从主干上拉出新的发布分支，进行合并  主干开发模式 #   在主干上拉出开发分支dev/001，在开发分支上进行开发 完成开发后，主干拉出发布分支release/001 将开发分支合并到发布分支上 上线后，将发布分支合并到主干，添加标签，删除发布分支和开发分支  代码检查 #  CheckStyle、FindBugs、Sonar
代码质量 #   代码规约；规范必要注释，用于梳理思维；IDE Format，持续集成Checkstyle、FindBugs；复杂逻辑工具类单元测试； 给予思考时间不随便压缩工期；Review代码；  持续集成 #   持续集成 jenkins+snoarqube+nexus  </description>
    </item>
    
    <item>
      <title>CPU和线程的性能分析</title>
      <link>http://example.org/docs/poet/test/cpu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/test/cpu/</guid>
      <description>CPU和线程的性能分析 #  </description>
    </item>
    
    <item>
      <title>RxJava</title>
      <link>http://example.org/docs/poet/server_framework/async/rxjava/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/server_framework/async/rxjava/</guid>
      <description>RxJava #  </description>
    </item>
    
    <item>
      <title>日志管理</title>
      <link>http://example.org/docs/poet/devops/log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/devops/log/</guid>
      <description>日志管理 #  </description>
    </item>
    
    <item>
      <title>内存和硬盘的性能分析</title>
      <link>http://example.org/docs/poet/test/memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/test/memory/</guid>
      <description>内存和硬盘的性能分析 #  </description>
    </item>
    
    <item>
      <title>JVM的性能分析</title>
      <link>http://example.org/docs/poet/test/jvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/test/jvm/</guid>
      <description>JVM的性能分析 #  </description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>http://example.org/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/creating-a-new-theme/</guid>
      <description>Introduction #  This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>http://example.org/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static #  Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>http://example.org/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>http://example.org/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo #  Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs #  Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/poet/tolerance/sentinel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/poet/tolerance/sentinel/</guid>
      <description>Sentinel #  得物配置的熔断规则
 Sentinel的慢调用比例熔断规则统计的时候，不是等到滑动窗口结束了再去根据这一整个窗口的数据来做判断，而是每次请求都会做判断。
比如拿最上面的配置规则来做例子的话，如果当前窗口的刚开始的前几个请求中（大于5）慢调用比例刚好超过了50%，那么就会触发熔断，断路器直接打开，3s内的所有请求都走降级，然后3s后断路器进入半开状态，如果下一个请求正常了，那么断路器就关闭。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/shortcodes/buttons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/shortcodes/buttons/</guid>
      <description>Buttons #  Buttons are styled links that can lead to local page or external link.
Example #  {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}}  Get Home  Contribute  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/shortcodes/columns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/shortcodes/columns/</guid>
      <description>Columns #  Columns help organize shorter pieces of content horizontally for readability.
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne...  &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt;  # Mid Content Lorem markdownum insigne...  &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt;  # Right Content Lorem markdownum insigne... {{&amp;lt; /columns &amp;gt;}} Example #  Left Content #  Lorem markdownum insigne. Olympo signis Delphis!</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/shortcodes/details/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/shortcodes/details/</guid>
      <description>Details #  Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.
Example #  {{&amp;lt; details &amp;#34;Title&amp;#34; [open] &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} {{&amp;lt; details title=&amp;#34;Title&amp;#34; open=true &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} Title Markdown content #  Lorem markdownum insigne&amp;hellip;   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/shortcodes/expand/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/shortcodes/expand/</guid>
      <description>Expand #  Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.
Example #  Default #  {{&amp;lt; expand &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}}   Expand ↕  Markdown content #  Lorem markdownum insigne&amp;hellip;    With Custom Label #  {{&amp;lt; expand &amp;#34;Custom Label&amp;#34; &amp;#34;...&amp;#34; &amp;gt;}} ## Markdown content Lorem markdownum insigne.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/shortcodes/hints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/shortcodes/hints/</guid>
      <description>Hints #  Hint shortcode can be used as hint/alerts/notification block.
There are 3 colors to choose: info, warning and danger.
{{&amp;lt; hint [info|warning|danger] &amp;gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{&amp;lt; /hint &amp;gt;}} Example #  Markdown content
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/shortcodes/katex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/shortcodes/katex/</guid>
      <description>KaTeX #  KaTeX shortcode let you render math typesetting in markdown document. See KaTeX
Example #  {{&amp;lt; katex [display] [class=&amp;#34;text-center&amp;#34;] &amp;gt;}} f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi {{&amp;lt; /katex &amp;gt;}}     Display Mode Example #  Here is some inline example:  \(\pi(x)\)  , rendered in the same line. And below is display example, having display: block  \[f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi\]  Text continues here.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/shortcodes/mermaid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/shortcodes/mermaid/</guid>
      <description>Mermaid Chart #   MermaidJS is library for generating svg charts and diagrams from text.
Override Mermaid Initialization Config
To override the initialization config for Mermaid, create a mermaid.json file in your assets folder!
 Example #  {{&amp;lt; mermaid [class=&amp;#34;text-center&amp;#34;]&amp;gt;}} stateDiagram-v2  State1: The state with a note  note right of State1  Important information! You can write  notes.  end note  State1 --&amp;gt; State2  note left of State2 : This is the note to the left.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/shortcodes/section/first-page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/shortcodes/section/first-page/</guid>
      <description>First page #  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/shortcodes/section/second-page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/shortcodes/section/second-page/</guid>
      <description>Second Page #  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/shortcodes/tabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/shortcodes/tabs/</guid>
      <description>Tabs #  Tabs let you organize content by context, for example installation instructions for each supported platform.
{{&amp;lt; tabs &amp;#34;uniqueid&amp;#34; &amp;gt;}} {{&amp;lt; tab &amp;#34;MacOS&amp;#34; &amp;gt;}} # MacOS Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Linux&amp;#34; &amp;gt;}} # Linux Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Windows&amp;#34; &amp;gt;}} # Windows Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; /tabs &amp;gt;}} Example #  MacOS MacOS #  This is tab MacOS content.
Lorem markdownum insigne. Olympo signis Delphis!</description>
    </item>
    
  </channel>
</rss>
